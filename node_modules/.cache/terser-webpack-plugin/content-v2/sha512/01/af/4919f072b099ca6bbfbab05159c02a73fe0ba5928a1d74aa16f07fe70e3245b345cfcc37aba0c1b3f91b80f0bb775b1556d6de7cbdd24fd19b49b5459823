{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{316:function(t,a,s){t.exports=s.p+\"assets/img/context-stack-1.2b321d90.gif\"},415:function(t,a,s){\"use strict\";s.r(a);var n=s(0),e=Object(n.a)({},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"执行上下文和执行栈\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行上下文和执行栈\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 执行上下文和执行栈\")]),t._v(\" \"),n(\"p\",[t._v(\"开始之前，我们先看以下代码。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-javascript extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[t._v(\"console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// Uncaught ReferenceError: a is not defined\")]),t._v(\"\\n\")])])]),n(\"div\",{staticClass:\"language-javascript extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[t._v(\"console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// undefined\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" a \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),t._v(\"\\n\")])])]),n(\"p\",[t._v(\"第一段代码报错很好理解，a 没有声明。所以抛出错误。\")]),t._v(\" \"),n(\"p\",[t._v(\"第二段代码中 a 的声明在使用 a 之后，打印 a 的值是 undefined。这就是变量提升的概念。\")]),t._v(\" \"),n(\"p\",[t._v(\"这里需要注意的是 undefined 是一个值，也就是说在使用 a 的时候，a 已经存在并且有一个值 undefined。这就很奇怪了，明明 a 还没有声明为什么就已经存在了呢？\")]),t._v(\" \"),n(\"p\",[t._v(\"其实是因为当 JavaScript 代码真正执行之前就已经做了一些准备工作，包括上面所说的变量的声明。而这些工作跟执行上下文有着紧密的联系，我们需要先来了解什么是执行上下文。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"执行上下文\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行上下文\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 执行上下文\")]),t._v(\" \"),n(\"p\",[t._v(\"简单来说执行上下文（Execution Context）就是执行 JavaScript 代码的环境。所有的代码都在执行上下文中执行。\")]),t._v(\" \"),n(\"p\",[t._v(\"上面的例子都是在全局上下文中执行的，其实执行上下文可以分为下面这三种\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"全局执行上下文 (Global Execution Context)\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"这是最基础或者默认的执行上下文，是代码一开始运行就会创建的上下文。\")]),t._v(\" \"),n(\"li\",[t._v(\"一个程序中只会有一个全局执行上下文\")]),t._v(\" \"),n(\"li\",[t._v(\"所有不在函数内部的代码都在全局执行上下文之中\")])]),t._v(\" \"),n(\"ol\",{attrs:{start:\"2\"}},[n(\"li\",[t._v(\"函数执行上下文 (Functional Execution Context)\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"当一个函数被调用时, 会为该函数创建一个上下文\")]),t._v(\" \"),n(\"li\",[t._v(\"每个函数都有自己的执行上下文\")])]),t._v(\" \"),n(\"ol\",{attrs:{start:\"3\"}},[n(\"li\",[t._v(\"Eval 函数执行上下文 (Eval Function Execution Context)\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"执行在 eval 函数内部的代码也会有它属于自己的执行上下文\")])]),t._v(\" \"),n(\"p\",[t._v(\"下面我们通过一个例子来加深印象。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-javascript extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" global_context \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'global_context'\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"f1\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" f1_context \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'f1 context'\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"f2\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" f2_context \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'f2 context'\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"f3\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" f3_context \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'f3 context'\")]),t._v(\"\\n            console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f3_context\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"f3\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f2_context\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"f2\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f1_context\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n\"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"f1\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nconsole\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"global_context\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),n(\"p\",[t._v(\"最外侧的是全局执行上下文，它有 f1 函数和 global_context 这两个变量，f1、f2、f3内部是三个函数执行上下文（Eval 函数执行上下文不是很常用，在这里不做介绍）。\")]),t._v(\" \"),n(\"p\",[t._v(\"上面我们知道每调用一个函数就会创建一个新的执行上下文。这个创建过程是什么样的呢？\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"执行上下文的两个阶段\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行上下文的两个阶段\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 执行上下文的两个阶段\")]),t._v(\" \"),n(\"p\",[t._v(\"可以分为两个阶段。\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"创建阶段(在这一阶段中，函数已经被调用，但是其内部的代码还没有执行)\\n\"),n(\"ul\",[n(\"li\",[t._v(\"建立作用域链\")]),t._v(\" \"),n(\"li\",[t._v(\"创建变量，参数，函数，arguments对象\")]),t._v(\" \"),n(\"li\",[t._v(\"确定 this 的值\")])])]),t._v(\" \"),n(\"li\",[t._v(\"执行阶段\\n\"),n(\"ul\",[n(\"li\",[t._v(\"变量赋值，函数引用，执行代码\")])])])]),t._v(\" \"),n(\"p\",[t._v(\"具体过程如下：\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"找到当前上下文调用函数的代码\")]),t._v(\" \"),n(\"li\",[t._v(\"执行代码之前，先创建执行上下文\")]),t._v(\" \"),n(\"li\",[t._v(\"创建阶段：\\n\"),n(\"ol\",[n(\"li\",[t._v(\"创建变量对象：\\n\"),n(\"ol\",[n(\"li\",[t._v(\"创建 arguments 对象，和参数\")]),t._v(\" \"),n(\"li\",[t._v(\"扫描上下文的函数申明：\\n\"),n(\"ol\",[n(\"li\",[t._v(\"每扫描到一个函数什么就会用函数名创建一个属性，它是一个指针，指向该函数在内存中的地址\")]),t._v(\" \"),n(\"li\",[t._v(\"如果函数名已经存在，对应的属性值会被新的指针覆盖\")])])]),t._v(\" \"),n(\"li\",[t._v(\"扫描上下文的变量申明：\\n\"),n(\"ol\",[n(\"li\",[t._v(\"每扫描到一个变量就会用变量名作为属性名，其值初始化为 undefined\")]),t._v(\" \"),n(\"li\",[t._v(\"如果该变量名在变量对象中已经存在，则直接跳过继续扫描\")])])])])]),t._v(\" \"),n(\"li\",[t._v(\"初始化作用域链\")]),t._v(\" \"),n(\"li\",[t._v(\"确定上下文中 this 的指向\")])])]),t._v(\" \"),n(\"li\",[t._v(\"代码执行阶段\\n\"),n(\"ol\",[n(\"li\",[t._v(\"执行函数体中的代码，给变量赋值\")])])])]),t._v(\" \"),n(\"blockquote\",[n(\"p\",[t._v(\"需要注意：上面提到的都是函数的执行上下文，全局执行上下文是没有 参数、arguments、作用域链 这几个概念的。\")]),t._v(\" \"),n(\"p\",[t._v(\"作用域链 和 this 的指向我们后面再详细了解\")])]),t._v(\" \"),n(\"p\",[t._v(\"了解到这里我们就可以解释变量提升到底是什么原因了。归根结底就是在创建执行上下文的时候所有上下文中声明的变量都会被初始化为 undefined，也就是说在真正代码执行之前声明的变量就已经存在并赋值为 undefined。\")]),t._v(\" \"),n(\"p\",[t._v(\"通过上面我们了解了每个函数都对应一个执行上下文，实际代码中肯定会有很多的函数，甚至函数会嵌套函数，这些执行上下文是如何组织起来的呢？代码又是如何运行的呢？\")]),t._v(\" \"),n(\"p\",[t._v(\"其实这些都是执行栈的工作。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"执行栈\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行栈\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 执行栈\")]),t._v(\" \"),n(\"p\",[t._v(\"执行栈，其他语言中被称为调用栈，与存储变量的那个栈的概念不同，它是被用来存储代码运行时创建的所有执行上下文的栈。\")]),t._v(\" \"),n(\"p\",[t._v(\"当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。\")]),t._v(\" \"),n(\"p\",[t._v(\"Javascript 是一门单线程的语言，这就意味着同一个时间只能处理一个任务。因此引擎只会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。\")]),t._v(\" \"),n(\"p\",[t._v(\"我们在上面的代码的执行过程可以归结为下面这个图：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:s(316),alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"文字版总结如下：\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"全局上下文压入栈顶\")]),t._v(\" \"),n(\"li\",[t._v(\"每执行某一函数就为其创建一个执行上下文，并压入栈顶\")]),t._v(\" \"),n(\"li\",[t._v(\"栈顶的函数执行完之后它的执行上下文就会从执行栈中弹出，将控制权交给下一个上下文\")]),t._v(\" \"),n(\"li\",[t._v(\"所有函数执行完之后执行栈中只剩下全局上下文，它会在应用关闭时销毁\")])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\",\"aria-hidden\":\"true\"}},[t._v(\"#\")])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"参考\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 参考\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[n(\"a\",{attrs:{href:\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Tasks, microtasks, queues and schedules\"),n(\"OutboundLink\")],1)]),t._v(\" \"),n(\"li\",[n(\"a\",{attrs:{href:\"http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"What is the Execution Context & Stack in JavaScript?\"),n(\"OutboundLink\")],1)])])])},[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}