{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{492:function(t,r,e){\"use strict\";e.r(r);var n=e(0),a=Object(n.a)({},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"二叉树\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉树\")]),t._v(\" \"),e(\"h1\",{attrs:{id:\"_23-二叉树基础-上\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_23-二叉树基础-上\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 23 二叉树基础 | 上\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"树的概念\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#树的概念\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 树的概念\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"                               ↑高度    ↓深度    →层\\n               A                3       0       1\\n           ╱       ╲\\n          B         C           2       1       2\\n       ╱  |  ╲     ╱ ╲\\n      D   E   F   G   H         1       2       3\\n     ╱   ╱ ╲   ╲\\n    I   J   K   L               0       3       4\\n\")])]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"节点：树中的每个元素，如 A, B, C, D...\")]),t._v(\" \"),e(\"li\",[t._v(\"父子关系：相邻节点的关系，如 A - B, A - C\")]),t._v(\" \"),e(\"li\",[t._v(\"父节点：A 节点就是 B、C 的父节点\")]),t._v(\" \"),e(\"li\",[t._v(\"子节点：B、C 就是 A 的子节点\")]),t._v(\" \"),e(\"li\",[t._v(\"兄弟节点：D、E、F 之间称为兄弟节点，F 和 G 就不是兄弟节点\")]),t._v(\" \"),e(\"li\",[t._v(\"根节点：没有父节点的节点，如 A\")]),t._v(\" \"),e(\"li\",[t._v(\"叶子节点：没有子节点的节点，如 G、I、J\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"节点高度\")]),t._v(\"：节点到叶子节点的最长路径，如 A 节点的高度就是 A 到 I 的长度，为 3\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"节点深度\")]),t._v(\"：根节点到该节点所经历的边的个数，如 E 节点的深度就是 E 到 A 的边的个数，为 2\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"节点层\")]),t._v(\"：节点的深度 +1\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"树的高度\")]),t._v(\"：根节点的高度\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"二叉树-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树-2\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉树\")]),t._v(\" \"),e(\"p\",[t._v(\"每个节点最多有两个子节点，分别称为\"),e(\"strong\",[t._v(\"左节点\")]),t._v(\"和\"),e(\"strong\",[t._v(\"右节点\")])]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[t._v(\"满二叉树\")]),t._v(\"：除了叶子节点外，每个节点都有左右节点的二叉树\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"完全二叉树\")]),t._v(\"：如下所示，叶子节点都在最下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数要达到最大\")])]),t._v(\" \"),e(\"p\",[t._v(\"完全二叉树\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"            A\\n         ╱     ╲\\n        B       C\\n      ╱   ╲    ╱ ╲\\n     D     E  F   G\\n    ╱ ╲   ╱\\n   H   I J\\n\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"二叉树的存储\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树的存储\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉树的存储\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[t._v(\"链式存储法\")]),t._v(\"：通过类似链表的结构存储，每个节点有三个字段\\n\"),e(\"ul\",[e(\"li\",[t._v(\"data：存储数据\")]),t._v(\" \"),e(\"li\",[t._v(\"left：左侧子节点的指针\")]),t._v(\" \"),e(\"li\",[t._v(\"right：右侧子节点的指针\")])])]),t._v(\" \"),e(\"li\",[t._v(\"基于数组的\"),e(\"strong\",[t._v(\"顺序存储法\")]),t._v(\"：按照层数将一层数据从左到右存入数组后接着存储下一层\\n\"),e(\"ul\",[e(\"li\",[t._v(\"根节点存储在数组中 1 的位置\")]),t._v(\" \"),e(\"li\",[t._v(\"第 i 层 第 k 个节点存储在 (i - 1) * 2 + (k - 1) 的位置\")]),t._v(\" \"),e(\"li\",[t._v(\"如果某个节点存储在 j 的位置，则其左子节点存储位置就是 j * 2，右节点存储的位置就是 j * 2 + 1，父节点就在 j / 2 的位置。\")])])])]),t._v(\" \"),e(\"p\",[t._v(\"由于完全二叉树的特性，它可以使用数组存储而不浪费空间。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"二叉树遍历\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树遍历\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉树遍历\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"        A\\n      ╱   ╲\\n     B     C\\n    ╱ ╲   ╱ ╲\\n   D   E F   G\\n\")])]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"前序遍历\\n\"),e(\"ul\",[e(\"li\",[t._v(\"对于树的任意节点来说，先打印这个节点，然后在再印它的左子树，最后打印它的右子树\")]),t._v(\" \"),e(\"li\",[t._v(\"如：A -> B -> D -> E -> C -> F -> G\")])])]),t._v(\" \"),e(\"li\",[t._v(\"中序遍历\\n\"),e(\"ul\",[e(\"li\",[t._v(\"对于树的任意节点来说，先打印它的左子树，然后再打印这个节点，最后打印它的右子树\")]),t._v(\" \"),e(\"li\",[t._v(\"如：D -> B -> E -> A -> F -> C -> G\")])])]),t._v(\" \"),e(\"li\",[t._v(\"后续遍历\\n\"),e(\"ul\",[e(\"li\",[t._v(\"对于树的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点\")]),t._v(\" \"),e(\"li\",[t._v(\"如：D -> E -> B -> F -> G -> C -> A\")])])])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"void preOrder(Node* root) {\\n  if (root == null) return;\\n  print root // 此处为伪代码，表示打印 root 节点\\n  preOrder(root->left);\\n  preOrder(root->right);\\n}\\n\\nvoid inOrder(Node* root) {\\n  if (root == null) return;\\n  inOrder(root->left);\\n  print root // 此处为伪代码，表示打印 root 节点\\n  inOrder(root->right);\\n}\\n\\nvoid postOrder(Node* root) {\\n  if (root == null) return;\\n  postOrder(root->left);\\n  postOrder(root->right);\\n  print root // 此处为伪代码，表示打印 root 节点\\n}\\n\")])])]),e(\"p\",[t._v(\"遍历二叉树的时间复杂度就是 O(n).\")]),t._v(\" \"),e(\"h1\",{attrs:{id:\"_24-二叉树基础-下\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_24-二叉树基础-下\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 24 二叉树基础 | 下\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"二叉查找树\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉查找树\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉查找树\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"二叉查找树中，任意一个节点，其左子树的每个节点的值都小于该节点，而右子树的值都大于这个节点\")])]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"            13\\n         ╱      ╲\\n        10       16\\n      ╱    ╲    ╱ \\n     9     11  14 \\n\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"二叉查找树的查找操作\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉查找树的查找操作\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉查找树的查找操作\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"查找的值小于当前节点就在左子树中查找\")]),t._v(\" \"),e(\"li\",[t._v(\"查找的值大于当前节点就在右子树中查找\")]),t._v(\" \"),e(\"li\",[t._v(\"否则说明当前查找的就是当前节点\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"二叉查找树的插入操作\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉查找树的插入操作\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉查找树的插入操作\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"从根节点开始，依次比较要插入的数据和节点的大小关系\")]),t._v(\" \"),e(\"li\",[t._v(\"如果要插入的数据比节点的数据大\\n\"),e(\"ul\",[e(\"li\",[t._v(\"节点的右子树为空，就将新数据直接插到右子节点的位置\")]),t._v(\" \"),e(\"li\",[t._v(\"节点的右子树不为空，就再递归遍历右子树，查找插入位置。\")])])]),t._v(\" \"),e(\"li\",[t._v(\"如果要插入的数据比节点数值小，\\n\"),e(\"ul\",[e(\"li\",[t._v(\"节点的左子树为空，就将新数据插入到左子节点的位置\")]),t._v(\" \"),e(\"li\",[t._v(\"节点的左子树不为空，就再递归遍历左子树，查找插入位置。\")])])])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"二叉查找树的删除操作\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉查找树的删除操作\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉查找树的删除操作\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"如果要删除的节点没有子节点，我们只需要直接将父节点中，指向要删除节点的指针置为 null\")]),t._v(\" \"),e(\"li\",[t._v(\"如果要删除的节点只有一个子节点（只有左子节点或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了\")]),t._v(\" \"),e(\"li\",[t._v(\"如果要删除的节点有两个子节点，这就比较复杂了。\\n\"),e(\"ul\",[e(\"li\",[t._v(\"我们需要找到这个节点的右子树中的最小节点，把它替换到要删除的节点上\")]),t._v(\" \"),e(\"li\",[t._v(\"然后再删除掉这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了）\")])])])]),t._v(\" \"),e(\"p\",[t._v(\"LeetCode 450\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"struct TreeNode* deleteNode(struct TreeNode* root, int key) {\\n    // 首先查找要删除的节点和他的父节点\\n    struct TreeNode *node = root;\\n    struct TreeNode *parentNode = NULL;\\n    while (node != NULL) {\\n        if (node->val < key) {\\n            parentNode = node;\\n            node = node->right;\\n        } else if (node->val > key) {\\n            parentNode = node;\\n            node = node->left;\\n        } else {\\n            break;\\n        }\\n    }\\n    // 没有找到，直接返回\\n    if (node == NULL) return root;\\n    \\n    // 查找的节点左右子节点都不为空\\n    if (node->left != NULL && node->right != NULL) {\\n        // 查找右子树中的最小值和它的父节点\\n        struct TreeNode *minNode = node->right;\\n        struct TreeNode *minParentNode = node;\\n        while (minNode->left != NULL) {\\n            minParentNode = minNode;\\n            minNode = minParentNode->left;\\n        }\\n        // 将最小值赋值给要删除的节点\\n        node->val = minNode->val;\\n        // 标记要删除的节点为最小值的节点，由于最小值节点一定是叶子节点，这样以来要删除的节点就被换到了叶子节点上\\n        node = minNode;\\n        parentNode = minParentNode;\\n    } \\n    \\n    // 获取要删除节点的子节点，由于上面节点左右子节点都不为空的节点被替换到了叶子节点上，因此左右子节点最多只会有一个不为空\\n    struct TreeNode *child = NULL;\\n    if (node->left != NULL) {\\n        child = node->left;\\n    } else if (node->right != NULL) {\\n        child = node->right;\\n    }\\n    \\n    // 父节点为空，说明是根结点\\n    if (parentNode == NULL) {\\n        root = child;\\n    } else if (parentNode->left == node) {\\n        parentNode->left = child;\\n    } else {\\n        parentNode->right = child;\\n    }\\n    \\n    return root;\\n}\\n\")])])]),e(\"h3\",{attrs:{id:\"二叉查找树的其他操作\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉查找树的其他操作\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉查找树的其他操作\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"快速地查找最大节点和最小节点、前驱节点和后继节点。\")]),t._v(\" \"),e(\"li\",[t._v(\"中序遍历二叉查找树，可以输出有序的数据序列，时间复杂度是 O(n)，非常高效\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"支持重复数据的二叉查找树\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#支持重复数据的二叉查找树\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 支持重复数据的二叉查找树\")]),t._v(\" \"),e(\"p\",[t._v(\"有以下两种处理方式\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"二叉查找树中每一个节点不仅会存储一个数据，因此我们通过链表和支持动态扩容的数组等数据结构，把值相同的数据都存储在同一个节点上。\")]),t._v(\" \"),e(\"li\",[t._v(\"每个节点仍然只存储一个数据。在查找插入位置的过程中，如果碰到一个节点的值，与要插入数据的值相同，我们就将这个要插入的数据放到这个节点的的右子树，也就是说，把这个新插入的数据当作大于这个节点的值来处理。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"二叉查找树的时间复杂度分析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉查找树的时间复杂度分析\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二叉查找树的时间复杂度分析\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"时间复杂度其实都跟树的高度成正比，也就是 O(height)\")])]),t._v(\" \"),e(\"p\",[t._v(\"最坏情况下二叉树退化为链表，因此查找的时间复杂度就为 O(n)\\n最好情况下二叉树是完全二叉树或者满二叉树，这时候高度最小，查找的时间复杂度最低\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"如何求-n-个节点的完全二叉树的高度\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何求-n-个节点的完全二叉树的高度\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 如何求 n 个节点的完全二叉树的高度\")]),t._v(\" \"),e(\"p\",[t._v(\"第 k 层满二叉树节点个数为 2^(k - 1)\")]),t._v(\" \"),e(\"p\",[t._v(\"对于完全二叉树来说，假设最大层数是 L，最后一层节点的个数大于等于 1，小于等于 2^(L - 1),根据等差数列求和公式可以得到以下关系\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"n >= 1+2+4+8+...+2^(L-2)+1\\nn <= 1+2+4+8+...+2^(L-2)+2^(L-1)\\n\")])])]),e(\"p\",[t._v(\"这样可以求出 L 的取值范围是 [log2(n+1), log2n +1]。\")]),t._v(\" \"),e(\"p\",[t._v(\"因此可以看出完全二叉树的高度小于等于 log2n。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"散列表与二叉树的优缺点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#散列表与二叉树的优缺点\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 散列表与二叉树的优缺点\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"第一，散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对于二叉查找树来说，我们只需要中序遍历，就可以在 O(n) 的时间复杂度内，输出有序的数据序列。\")]),t._v(\" \"),e(\"p\",[t._v(\"第二，散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，我们最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在 O(logn)。\")]),t._v(\" \"),e(\"p\",[t._v(\"第三，笼统地来说，尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比 logn 小，所以实际的查找速度可能不一定比 O(logn) 快。加上哈希函数的耗时，也不一定就比平衡二叉查找树的效率高。\")]),t._v(\" \"),e(\"p\",[t._v(\"第四，散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定。\")]),t._v(\" \"),e(\"p\",[t._v(\"最后，为了避免过多的散列冲突，散列表装载因子不能太大，特别是基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间。\")]),t._v(\" \"),e(\"p\",[t._v(\"综合这几点，平衡二叉查找树在某些方面还是优于散列表的，所以，这两者的存在并不冲突。我们在实际的开发过程中，需要结合具体的需求来选择使用哪一个。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"计算二叉树的高度\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计算二叉树的高度\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 计算二叉树的高度\")]),t._v(\" \"),e(\"p\",[t._v(\"LeetCode 104\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"int maxDepth(struct TreeNode* root) {\\n    if (root == NULL) return 0;\\n    int leftD = maxDepth(root->left);\\n    int rightD = maxDepth(root->right);\\n    return (leftD > rightD ? leftD : rightD) + 1;\\n}\\n\")])])]),e(\"h1\",{attrs:{id:\"_25-红黑树-上\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_25-红黑树-上\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 25 红黑树 | 上\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"平衡二叉查找树\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#平衡二叉查找树\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 平衡二叉查找树\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"严格定义：\"),e(\"strong\",[t._v(\"二叉树中任意节点的左右子树的高度相差不大于1\")])]),t._v(\" \"),e(\"li\",[t._v(\"完全二叉树、满二叉树都是平衡二叉树。\")]),t._v(\" \"),e(\"li\",[t._v(\"平衡的概念：\"),e(\"strong\",[t._v(\"整棵树的左右子树都比较平衡，不会出现一边高很多，一边矮很多\")]),t._v(\"。这样以来整个树的高度会更低，查找、删除、插入的效率会更高。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"红黑树定义\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#红黑树定义\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 红黑树定义\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"节点分为红色和黑色\")]),t._v(\" \"),e(\"li\",[t._v(\"根节点是黑色\")]),t._v(\" \"),e(\"li\",[t._v(\"每个叶子节点都是黑色的空节点，不存储数据\")]),t._v(\" \"),e(\"li\",[t._v(\"每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)\")]),t._v(\" \"),e(\"li\",[t._v(\"从每个节点到达其叶子节点的路径上都包含相同的黑色节点\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"红黑树的高度\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#红黑树的高度\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 红黑树的高度\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[t._v(\"首先将红色节点去除，红色节点的子节点以其祖父节点的作为父节点\")]),t._v(\" \"),e(\"li\",[t._v(\"去掉之后形成一个四叉树\")]),t._v(\" \"),e(\"li\",[t._v(\"由于红黑树上从每个节点到达其叶子节点的路径上都包含相同的黑色节点，这样将这个四叉树上的大于两个的节点取出来，放到叶子节点上就形成了完全二叉树\")]),t._v(\" \"),e(\"li\",[t._v(\"因此上面的四叉树的高度一定低于这个完全二叉树\")]),t._v(\" \"),e(\"li\",[t._v(\"因为完全二叉树的高度近似 log2n ,因此四叉树的高度小于 log2n\")]),t._v(\" \"),e(\"li\",[t._v(\"由于红色节点被黑色节点隔离，因此加上红色节点的红黑树的高度不会大于 2 * log2n\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"红黑树的优点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#红黑树的优点\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 红黑树的优点\")]),t._v(\" \"),e(\"p\",[t._v(\"红黑树是一个近似平衡的二叉树，维护成本相较于严格平衡定义的 AVL 树低了很多。所以，红黑树的插入、删除、查找各种操作性能都比较稳定。\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"红黑树的高度近似 log2n，所以它是近似平衡，插入、删除、查找操作的时间复杂度都是 O(logn)。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"动态数据结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动态数据结构\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 动态数据结构\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"动态数据结构是支持动态的更新操作，里面存储的数据是时刻在变化的，通俗一点讲，它不仅仅支持查询，还支持删除、插入数据。而且，这些操作都非常高效。如果不高效，也就算不上是有效的动态数据结构了。所以，这里的红黑树算一个，支持动态的插入、删除、查找，而且效率都很高。链表、队列、栈实际上算不上，因为操作非常有限，查询效率不高。\")])]),t._v(\" \"),e(\"blockquote\",[e(\"ul\",[e(\"li\",[t._v(\"散列表：插入删除查找都是O(1), 是最常用的，但其缺点是不能顺序遍历以及扩容缩容的性能损耗。适用于那些不需要顺序遍历，数据更新不那么频繁的。\")]),t._v(\" \"),e(\"li\",[t._v(\"跳表：插入删除查找都是O(logn), 并且能顺序遍历。缺点是空间复杂度O(n)。适用于不那么在意内存空间的，其顺序遍历和区间查找非常方便。\")]),t._v(\" \"),e(\"li\",[t._v(\"红黑树：插入删除查找都是O(logn), 中序遍历即是顺序遍历，稳定。缺点是难以实现，去查找不方便。其实跳表更佳，但红黑树已经用于很多地方了。\")])])]),t._v(\" \"),e(\"h1\",{attrs:{id:\"_26-红黑树-下\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_26-红黑树-下\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 26 红黑树 | 下\")]),t._v(\" \"),e(\"p\",[t._v(\"跳过。。。\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"            |                             |\\n            X                             Y\\n         ╱     ╲         左旋           ╱     ╲\\n        a       Y         ->          X       r\\n               ╱ ╲                   ╱ ╲\\n              b   r                 a   b\\n\\n\\n            |                             |\\n            X                             Y\\n         ╱     ╲         右旋           ╱     ╲\\n        Y       r         ->          a       X\\n       ╱ ╲                                   ╱ ╲\\n      a   b                                 b   r\")])])])},[],!1,null,null,null);r.default=a.exports}}]);","extractedComments":[]}