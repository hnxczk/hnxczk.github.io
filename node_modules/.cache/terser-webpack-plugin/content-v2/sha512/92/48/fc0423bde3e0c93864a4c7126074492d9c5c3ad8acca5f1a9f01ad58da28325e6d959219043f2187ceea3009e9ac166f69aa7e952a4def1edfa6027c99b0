{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{190:function(e,t,s){e.exports=s.p+\"assets/img/config_1.dc42a73c.jpeg\"},191:function(e,t,s){e.exports=s.p+\"assets/img/config_2.d7b6f399.jpeg\"},192:function(e,t,s){e.exports=s.p+\"assets/img/config_3.dd088a12.jpeg\"},193:function(e,t,s){e.exports=s.p+\"assets/img/config_4.988fc458.png\"},194:function(e,t,s){e.exports=s.p+\"assets/img/config_5.a910c7c5.jpeg\"},195:function(e,t,s){e.exports=s.p+\"assets/img/config_6.058e7f59.jpeg\"},196:function(e,t,s){e.exports=s.p+\"assets/img/config_7.1c926363.png\"},197:function(e,t,s){e.exports=s.p+\"assets/img/config_8.dab7d740.png\"},198:function(e,t,s){e.exports=s.p+\"assets/img/config_9.1cd355fe.png\"},199:function(e,t,s){e.exports=s.p+\"assets/img/config_10.ca9ccd88.png\"},200:function(e,t,s){e.exports=s.p+\"assets/img/config_11.0419611e.png\"},201:function(e,t,s){e.exports=s.p+\"assets/img/config_12.389b8b77.png\"},202:function(e,t,s){e.exports=s.p+\"assets/img/config_13.18049fdb.png\"},488:function(e,t,s){\"use strict\";s.r(t);var i=s(0),n=Object(i.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[i(\"h1\",{attrs:{id:\"ios中的多环境配置\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ios中的多环境配置\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" iOS中的多环境配置\")]),e._v(\" \"),i(\"p\",[e._v(\"在实际开发中我们经常会碰到在多个环境相互切换的问题。比如线上服务器、测试服务器的切换。最简单的方法当然就是定义相应的服务器地址的常量，然后程序员自己通过注释和去除注释来切换环境。但是一个常见的问题就是由于项目紧急上线导致某个参数忘记修改配置，导致生产事故的发生，这个问题一直比较困扰开发人员，导致开发的程序健壮性不强。\")]),e._v(\" \"),i(\"p\",[e._v(\"其实 Xcode 提供了一系列的工具帮助我们进行妥善地配置，下面我来介绍下三种解决方案。\")]),e._v(\" \"),i(\"h2\",{attrs:{id:\"_1-通过-xcode-的-build-configuration-来配置\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-通过-xcode-的-build-configuration-来配置\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 通过 Xcode 的 Build Configuration 来配置\")]),e._v(\" \"),i(\"ol\",[i(\"li\",[i(\"p\",[e._v(\"选择你的Xcode项目，找到info-Configuration，然后点击+，选择Duplication”Debug” Configuration 或Duplication”Release” Configuration ，添加一个新的配置。\\n\"),i(\"img\",{attrs:{src:s(190),alt:\"\"}})])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"如果此时项目里面有cocopods的话，刚刚新建完Build Configuration之后，请立即执行一下 \"),i(\"code\",[e._v(\"pod install\")])])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"设置配置构建方案,选择项目的 Manage Schemes，选择当前的应用程序，点击左下角的小齿轮，然后点击 Duplicate，该应用程序构建方案具有相同的名称并且作为项目默认设置.\\n\"),i(\"img\",{attrs:{src:s(191),alt:\"\"}})]),e._v(\" \"),i(\"ol\",[i(\"li\",[e._v(\"如果是多人开发项目，他们将不会看到你的新方案，因为你没有分享它。如果你选择你的方案，并且右侧点击share复选框，然后提交到你的源代码管理系统，其他人将能够使用这些方案了\")]),e._v(\" \"),i(\"li\",[e._v(\"在新的对话框中，更改方案的名称，这里可以把 Run 模式和 Archive 都改成新建Scheme。若更改方案的名称，例如你的 App 名称 +AdHoc，然后选择 Archive 选项并且设置 Configuration 为 AdHoc，完成之后点击 close 按钮\\n\"),i(\"img\",{attrs:{src:s(192),alt:\"\"}})])])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"配置和获取环境变量\")]),e._v(\" \"),i(\"p\",[e._v(\"使用GCC预编译头参数 \"),i(\"code\",[e._v(\"GCC_PREPROCESSOR_DEFINITIONS\")]),e._v(\"\\n我们进入到 Build Settings 里面，可以找到 \"),i(\"code\",[e._v(\"Apple LLVM Preprocessing\")]),e._v(\"，这里我们可以找到 Preprocessor Macros 在这里，我们是可以加一些环境变量的宏定义来标识符。Preprocessor Macros 可以根据不同的环境预先制定不同定义的宏。\\n\"),i(\"img\",{attrs:{src:s(193),alt:\"\"}})])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"有了这些我们预先设置的标识符之后，我们就可以在代码里面写入如下的代码了。\")])])]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v('#ifdef DEVELOP\\n#define searchURL @\"http://www.baidu.com\"\\n#define sociaURL  @\"weibo.com\"\\n#elif UAT\\n#define searchURL @\"http://www.bing.com\"\\n#define sociaURL  @\"twitter.com\"\\n#else\\n#define searchURL @\"http://www.google.com\"\\n#define sociaURL  @\"facebook.com\"\\n#endif\\n')])])]),i(\"ol\",{attrs:{start:\"6\"}},[i(\"li\",[i(\"p\",[e._v(\"我们还可以通过配置来控制不同 scheme 输出不同的包名和图标。\")]),e._v(\" \"),i(\"ol\",[i(\"li\",[i(\"p\",[e._v(\"新建User-defined Build Settings\\n\"),i(\"img\",{attrs:{src:s(194),alt:\"\"}})]),e._v(\" \"),i(\"p\",[e._v(\"再次回到Project的Build Settings里面来，Add User-Defined Setting。\")]),e._v(\" \"),i(\"p\",[e._v(\"我们这里新加入2个参数，CustomAppBundleld是为了之后打包可以分开打成多个包，这里需要3个不同的Id，建议是直接在原来的Bundleld加上Scheme的名字即可。\")]),e._v(\" \"),i(\"p\",[e._v(\"CustomProductName是为了app安装到手机上之后，手机上显示的名字，这里可以按照对应的环境给予描述，比如测试服，UAT，等等。如下图。\"),i(\"br\"),e._v(\" \"),i(\"img\",{attrs:{src:s(195),alt:\"\"}})])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"修改info.plist文件和Images.xcassets\")]),e._v(\" \"),i(\"p\",[e._v(\"先来修改一下info.plist文件。\\n\"),i(\"img\",{attrs:{src:s(196),alt:\"\"}})]),e._v(\" \"),i(\"p\",[e._v(\"由于我们新添加了2个CustomAppBundleld 和 CustomProductName，这里我们需要把info.plist里面的Bundle display name修改成我们自定义的这个字典。编译过程中，编译器会根据我们设置好的Scheme去自己选择Debug，Release，TestRelease分别对应的ProductName。\")])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"我们还需要在Images.xcassets里面新添加2个New iOS App Icon，名字最好和scheme的名字相同，这样好区分。\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:s(197),alt:\"\"}})]),e._v(\" \"),i(\"p\",[e._v(\"新建完AppIcon之后，再在Build Setting里面找到Asset Catalog Compiler里面，然后把这几种模式下的App Icon set\\nName分别设置上对应的图标。如下图。\\n\"),i(\"img\",{attrs:{src:s(198),alt:\"\"}})])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"配置好上述之后，就可以选择不同环境运行app了。可以在手机上生成不同的环境的app，可以同时安装。\")])])])])]),e._v(\" \"),i(\"h2\",{attrs:{id:\"通过配置文件来进行配置\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通过配置文件来进行配置\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 通过配置文件来进行配置\")]),e._v(\" \"),i(\"p\",[e._v(\"与上面的方法相同，他也要配置不同的 scheme。具体操作同上。创建好不同的 scheme 例如 Debug 、Release、 AdHoc 之后继续下面的操作。\")]),e._v(\" \"),i(\"ol\",[i(\"li\",[e._v(\"为每个环境设置不同的配置文件\\n\"),i(\"img\",{attrs:{src:s(199),alt:\"\"}}),e._v(\" \"),i(\"ol\",[i(\"li\",[e._v(\"这些Configuration文件夹命名必须与你的项目配置名称匹配，显然这些是区分大小写的。具体路径如下图。\\n\"),i(\"img\",{attrs:{src:s(200),alt:\"\"}})]),e._v(\" \"),i(\"li\",[e._v(\"为了确保我们为每个环境使用了正确的配置，应该不要把文件加到应用程序中。比如在创建文件是取消加入到工程的选项，或者加入后在文件目录选择文件，在 Target Membership 中取消勾选。\\n\"),i(\"img\",{attrs:{src:s(201),alt:\"\"}})])])]),e._v(\" \"),i(\"li\",[e._v(\"接下来是要确保当应用程序被编译的时候拷贝对应的配置文件到应用程序中。要做到这一点，进入项目根目录，选择 NewRun Script Phase，并命名为 CopyConfiguration File(s)。\")]),e._v(\" \"),i(\"li\",[e._v(\"将以下内容拷贝到script中，如图所示。\")])]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v('RESOURCE_PATH=${SRCROOT}/${PRODUCT_NAME}/config/${CONFIGURATION}\\nBUILD_APP_DIR=${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app \\n\\necho \"Copying all files under ${RESOURCE_PATH} to ${BUILD_APP_DIR}\"\\ncp -v \"${RESOURCE_PATH}/\"* \"${BUILD_APP_DIR}/\"\\n')])])]),i(\"p\",[e._v(\"该脚本将根据你的具体配置文件夹中的所有文件复制到构建应用程序包文件夹中。重要是保持CopyBundle Resources和添加文件的顺序。\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:s(202),alt:\"\"}})]),e._v(\" \"),i(\"p\",[e._v(\"继续构建你的项目，然后检查输出，应该能看到echo 消息和列表文件被打印出来\")]),e._v(\" \"),i(\"ol\",{attrs:{start:\"4\"}},[i(\"li\",[i(\"p\",[e._v(\"使用配置的值\")]),e._v(\" \"),i(\"p\",[e._v(\"例如，在应用程序中获取配置文件的路径\")])])]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v('NSBundle *bundle = [NSBundle mainBundle];\\nNSString *path = [bundle pathForResource:@\"Configuration\" ofType:@\"plist\"];\\nNSDictionary *config = [NSDictionary dictionaryWithContentsOfFile:path];\\n    \\nNSLog(@\"%@\", config[@\"kBaseUrl\"]);\\n')])])]),i(\"h2\",{attrs:{id:\"参考\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 参考\")]),e._v(\" \"),i(\"ol\",[i(\"li\",[i(\"a\",{attrs:{href:\"https://www.jianshu.com/p/0f1e8dc0812a\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"iOS多环境配置\"),i(\"OutboundLink\")],1)]),e._v(\" \"),i(\"li\",[i(\"a\",{attrs:{href:\"https://www.jianshu.com/p/0d5aa790713c\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"IOS打包测试发布环境配置\"),i(\"OutboundLink\")],1)]),e._v(\" \"),i(\"li\",[i(\"a\",{attrs:{href:\"https://blog.csdn.net/dream9393/article/details/58127654\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"iOS多环境配置（Debug，Release之外）\"),i(\"OutboundLink\")],1)])])])},[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}