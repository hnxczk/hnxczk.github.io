{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{293:function(n,a,e){n.exports=e.p+\"assets/img/06-command-pattern-1.9598b482.png\"},294:function(n,a,e){n.exports=e.p+\"assets/img/06-command-pattern-2.33cb2bac.png\"},295:function(n,a,e){n.exports=e.p+\"assets/img/06-command-pattern-3.d3ca8d7b.png\"},296:function(n,a,e){n.exports=e.p+\"assets/img/06-command-pattern-4.f34aebfb.png\"},392:function(n,a,e){\"use strict\";e.r(a);var t=e(0),o=Object(t.a)({},function(){var n=this,a=n.$createElement,t=n._self._c||a;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"命令模式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#命令模式\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 命令模式\")]),n._v(\" \"),t(\"p\",[n._v(\"一个餐厅点餐的交互过程\")]),n._v(\" \"),t(\"ol\",[t(\"li\",[n._v(\"客户创建订单\")]),n._v(\" \"),t(\"li\",[n._v(\"订单封装了准备餐点的请求\")]),n._v(\" \"),t(\"li\",[n._v(\"女招待的工作是接受订单，然后调用订单的 orderUp() 方法\")]),n._v(\" \"),t(\"li\",[n._v(\"厨师具备具体准备餐点的能力\\n\"),t(\"img\",{attrs:{src:e(293),alt:\"\"}})])]),n._v(\" \"),t(\"p\",[n._v(\"抽象出来命令模式\\n\"),t(\"img\",{attrs:{src:e(294),alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"具体代码见\"),t(\"a\",{attrs:{href:\"./code/06-command-pattern/01-Command\"}},[n._v(\"这里\")])]),n._v(\" \"),t(\"h2\",{attrs:{id:\"定义命令模式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义命令模式\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 定义命令模式\")]),n._v(\" \"),t(\"p\",[n._v(\"命令模式：将“请求”封装成对象，一边使用不同的请求、队列或者日志来来参数化其他对象。命令模式也支持可撤销的操作。\")]),n._v(\" \"),t(\"p\",[n._v(\"我们知道一个命令对象通过在特定接收者上绑定一组动作来封装一个请求。要达到这点，命令对象间动作和接收者包进对象中，这个对象只暴露出一个execute()方法，当此方法被调用的时候，接收者就会进行这些动作，从外面来看，其他对象不知道究竟哪个接收者进行了那些动作，只知道如果调动execute()方法，请求的目的就能达到。\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:e(295),alt:\"\"}})]),n._v(\" \"),t(\"h2\",{attrs:{id:\"实现遥控器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现遥控器\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 实现\\b遥控器\")]),n._v(\" \"),t(\"p\",[n._v(\"具体代码见\"),t(\"a\",{attrs:{href:\"./code/06-command-pattern/02-Command\"}},[n._v(\"这里\")])]),n._v(\" \"),t(\"p\",[n._v(\"简单来说就是在 RemoteControl 类中\\b通过数组来作为各种命令的\\b容器，然后\\b在执行命令的时候通过方法 \"),t(\"code\",[n._v(\"func setCommand(slot:Int, onCommand: Command, offCommand: Command)\")]),n._v(\"来设置。\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:e(296),alt:\"\"}})]),n._v(\" \"),t(\"h2\",{attrs:{id:\"使用状态撤销\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用状态撤销\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 使用状态撤销\")]),n._v(\" \"),t(\"p\",[n._v(\"在 CeilingFanHighCommand \\b的 undo 方法中\\b添加以下代码\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"    var prevSpeed: SpeedType = .Off\\n\")])])]),t(\"p\",[n._v(\"使用 prevSpeed 来记录上次的 speed\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"    func undo() {\\n        switch prevSpeed {\\n        case .High:\\n            ceilingFan.high()\\n        case .Medium:\\n            ceilingFan.medium()\\n        case .Low:\\n            ceilingFan.low()\\n        case .Off:\\n            ceilingFan.off()\\n        }\\n    }\\n\")])])]),t(\"p\",[n._v(\"然后在 undo 方法中通过上次记录的 prevSpeed 来还原上次的操作。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('var remoteControl = RemoteControl()\\n\\nvar ceilingFan = CeilingFan(name: \"Living Room\")\\n\\nvar ceilingFanHighCommand = CeilingFanHighCommand(ceilingFan: ceilingFan)\\nvar ceilingFanMdeiomCommand = CeilingFanMediumCommand(ceilingFan: ceilingFan)\\nvar ceilingFanOffCommand = CeilingFanOffCommand(ceilingFan: ceilingFan)\\n\\nremoteControl.setCommand(slot: 0, onCommand: ceilingFanHighCommand, offCommand: ceilingFanOffCommand)\\nremoteControl.setCommand(slot: 1, onCommand: ceilingFanMdeiomCommand, offCommand: ceilingFanOffCommand)\\n\\n// 点击第一行的 on 开关，remoteControl 的成员变量 undoCommand 会记录下 ceilingFanHighCommand，ceilingFanHighCommand 的 prevSpeed 会先记录下之前的 speed: off,然后调用 ceilingFan 的 high\\nremoteControl.onButtonWasPressed(solt: 0)\\n// 点击第一行的 off 开关，remoteControl 的成员变量 undoCommand 会记录下 ceilingFanOffCommand，ceilingFanOffCommand 的 prevSpeed 会记录下之前的speed： high， 然后调用 ceilingFan 的 off\\nremoteControl.offButtonWasPressed(solt: 0)\\n// 点击撤销时remoteControl 的成员变量 undoCommand 是 ceilingFanOffCommand，因此 调用 ceilingFanOffCommand 的 undo 根据之前记录下的 prevSpeed：high， 然后执行 high\\nremoteControl.undoButtonWasPressed()\\n\\nremoteControl.onButtonWasPressed(solt: 1)\\nremoteControl.undoButtonWasPressed()\\n')])])]),t(\"h2\",{attrs:{id:\"命令模式的其他用途\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#命令模式的其他用途\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 命令模式的其他用途\")]),n._v(\" \"),t(\"h3\",{attrs:{id:\"队列请求\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#队列请求\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 队列请求\")]),n._v(\" \"),t(\"p\",[n._v(\"命令可以将运算块打包(一个接受者和一组动作)，然后将它传来传去，就像是一般的对象一样，现在，即使在命令对象被创建许久之后，运算依然可以被调用，事实上，它甚至可以在不同的线程中被调用，我们可以利用这样的特性衍生一些应用，例如：日程安排，线程池，工作队列等。\")]),n._v(\" \"),t(\"p\",[n._v(\"想象有一个工作队列：你在某一端添加命令，然后另一端则是线程，线程进行下面的动作：从队列中取出一个命令，调用它的execute()方法，等待这个调用完成，然后将此命令对象丢弃，再取出下一个命令……\")]),n._v(\" \"),t(\"h3\",{attrs:{id:\"日志请求\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#日志请求\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 日志请求\")]),n._v(\" \"),t(\"p\",[n._v(\"更多应用需要我们将所有的动作都记录在日志中，并能在系统死机后，重新调用这些动作恢复到之前的状态。当我们执行命令的时候，将历时记录存储在磁盘中。一旦系统死机，我们就可以将命令对象重新加载，并成批地依次调用这些对象的execute()方法。\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"命令模式的思考-🤔\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#命令模式的思考-🤔\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 命令模式的思考 🤔\")]),n._v(\" \"),t(\"p\",[n._v(\"个人感觉 OC 中的 Block 和 Swift 中的 闭包，都可以看成是一组命令，也是命令模式的一种实现。比如 A 控制 push 出 B 控制器的时候，A 可以通过给 B 的一个 Block 属性赋值，把一些操作封装成命令传给 B，这样的话 比如 B 控制器\\b内某个按钮点击后就可以通过调用 Block 属性来执行 A 传过来的命令，而不必关心\\b具体的命令是什么。\")])])},[],!1,null,null,null);a.default=o.exports}}]);","extractedComments":[]}