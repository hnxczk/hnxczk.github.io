{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{465:function(e,a,t){\"use strict\";t.r(a);var r=t(0),n=Object(r.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"ios-代码规范\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ios-代码规范\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" iOS 代码规范\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"一-通用规范\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一-通用规范\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 一. 通用规范\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"大括号\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#大括号\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 大括号\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"控制语句(if,for,while,switch)中，大括号开始与行尾(行尾大括号前要加上一个空格)\")]),e._v(\" \"),t(\"li\",[e._v(\"函数中，大括号要开始于行首\\n推荐这样写：\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//控制语句\\nwhite (someCondition) {\\n}\\n//函数\\nvoid function(param1,param2)\\n{\\n\\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"运算符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#运算符\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 运算符\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-运算符与变量之间的间隔\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-运算符与变量之间的间隔\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.运算符与变量之间的间隔\")]),e._v(\" \"),t(\"h5\",{attrs:{id:\"_1-1一元运算符与变量之间没有空格：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1一元运算符与变量之间没有空格：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.1一元运算符与变量之间没有空格：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"!bValue\\n~iValue\\n++iCount\\n*strSource\\n&fSum\\n\")])])]),t(\"h5\",{attrs:{id:\"_1-2-二元运算符与变量之间必须有空格\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-二元运算符与变量之间必须有空格\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.2 二元运算符与变量之间必须有空格\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"fWidth = 5 + 5;\\nfLength = fWidth * 2;\\nfHeight = fWidth + fLength;\\nfor(int i = 0; i < 10; i++)\\n\")])])]),t(\"h4\",{attrs:{id:\"_2-多个不同的运算符同时存在时应该使用括号来明确优先级\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-多个不同的运算符同时存在时应该使用括号来明确优先级\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2.多个不同的运算符同时存在时应该使用括号来明确优先级\")]),e._v(\" \"),t(\"p\",[e._v(\"在多个不同的运算符同时存在的时候应该合理使用括号，不要盲目依赖操作符优先级。\\n因为有的时候不能保证阅读你代码的人就一定能了解你写的算式里面所有操作符的优先级。\")]),e._v(\" \"),t(\"p\",[e._v(\"来看一下这个算式：\"),t(\"code\",[e._v(\"2 << 2 + 1 * 3 - 4\")])]),e._v(\" \"),t(\"p\",[e._v(\"这里的 << 是移位操作直观上却很容易认为它的优先级很高，所以就把这个算式误认为：\"),t(\"code\",[e._v(\"(2 << 2) + 1 3 - 4\")]),e._v(\"。\\n但事实上，它的优先级是比加减法还要低的，所以该算式应该等同于：\"),t(\"code\",[e._v(\"2 << (2 + 1 3 - 4)\")]),e._v(\"。\\n所以在以后写这种复杂一点的算式的时候，尽量多加一点括号，避免让其他人误解（甚至是自己）。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"变量\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#变量\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 变量\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[e._v(\"一个变量有且只有一个功能，尽量不要把一个变量用作多种用途\")]),e._v(\" \"),t(\"li\",[e._v(\"变量在使用前应初始化，防止未初始化的变量被引用\")]),e._v(\" \"),t(\"li\",[e._v(\"局部变量应该尽量接近使用它的地方\")])]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"func someFunction() {\\n \\n  let index = ...;\\n  //Do something With index\\n  ...\\n  ...\\n  \\n  let count = ...;\\n  //Do something With count\\n  \\n}\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"func someFunction() {\\n \\n  let index = ...;\\n  let count = ...;\\n  //Do something With index\\n  ...\\n  ...\\n  \\n  //Do something With count\\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"if语句\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#if语句\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" if语句\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-必须列出所有分支（穷举所有的情况），而且每个分支都必须给出明确的结果。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-必须列出所有分支（穷举所有的情况），而且每个分支都必须给出明确的结果。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 必须列出所有分支（穷举所有的情况），而且每个分支都必须给出明确的结果。\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('var hintStr;\\nif (count < 3) {\\n  hintStr = \"Good\";\\n} else {\\n  hintStr = \"\";\\n}\\n')])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('var hintStr;\\nif (count < 3) {\\n hintStr = \"Good\";\\n}\\n')])])]),t(\"h4\",{attrs:{id:\"_2-不要使用过多的分支，要善于使用return来提前返回错误的情况\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-不要使用过多的分支，要善于使用return来提前返回错误的情况\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 不要使用过多的分支，要善于使用return来提前返回错误的情况\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (void)someMethod { \\n  if (!goodCondition) {\\n    return;\\n  }\\n  //Do something\\n}\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (void)someMethod { \\n  if (goodCondition) {\\n    //Do something\\n  }\\n}\\n\")])])]),t(\"p\",[e._v(\"比较典型的例子在JSONModel里遇到过：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"-(id)initWithDictionary:(NSDictionary*)dict error:(NSError)err\\n{\\n   //方法1. 参数为nil\\n   if (!dict) {\\n     if (err) *err = [JSONModelError errorInputIsNil];\\n     return nil;\\n    }\\n    //方法2. 参数不是nil，但也不是字典\\n    if (![dict isKindOfClass:[NSDictionary class]]) {\\n        if (err) *err = [JSONModelError errorInvalidDataWithMessage:@\\\"Attempt to initialize JSONModel object using initWithDictionary:error: but the dictionary parameter was not an 'NSDictionary'.\\\"];\\n        return nil;\\n    }\\n    //方法3. 初始化\\n    self = [self init];\\n    if (!self) {\\n        //初始化失败\\n        if (err) *err = [JSONModelError errorModelIsInvalid];\\n        return nil;\\n    }\\n    //方法4. 检查用户定义的模型里的属性集合是否大于传入的字典里的key集合（如果大于，则返回NO）\\n    if (![self __doesDictionary:dict matchModelWithKeyMapper:self.__keyMapper error:err]) {\\n        return nil;\\n    }\\n    //方法5. 核心方法：字典的key与模型的属性的映射\\n    if (![self __importDictionary:dict withKeyMapper:self.__keyMapper validation:YES error:err]) {\\n        return nil;\\n    }\\n    //方法6. 可以重写[self validate:err]方法并返回NO，让用户自定义错误并阻拦model的返回\\n    if (![self validate:err]) {\\n        return nil;\\n    }\\n    //方法7. 终于通过了！成功返回model\\n    return self;\\n}\\n\")])])]),t(\"p\",[e._v(\"可以看到，在这里，首先判断出各种错误的情况然后提前返回，把最正确的情况放到最后返回。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_3-条件表达式如果很长，则需要将他们提取出来赋给一个bool值\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-条件表达式如果很长，则需要将他们提取出来赋给一个bool值\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. 条件表达式如果很长，则需要将他们提取出来赋给一个BOOL值\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('let nameContainsSwift = sessionName.hasPrefix(\"Swift\")\\nlet isCurrentYear = sessionDateCompontents.year == 2014\\nlet isSwiftSession = nameContainsSwift && isCurrentYear\\nif (isSwiftSession) { \\n   // Do something\\n}\\n')])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('if ( sessionName.hasPrefix(\"Swift\") && (sessionDateCompontents.year == 2014) ) { \\n    // Do something\\n}\\n')])])]),t(\"h4\",{attrs:{id:\"_4-每个分支的实现代码都必须被大括号包围\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-每个分支的实现代码都必须被大括号包围\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. 每个分支的实现代码都必须被大括号包围\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"if (!error) {\\n  return success;\\n}\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"if (!error)\\n    return success;\\n\")])])]),t(\"p\",[e._v(\"或者\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"if (!error) return success;\\n\")])])]),t(\"h4\",{attrs:{id:\"_5-条件过多，过长的时候应该换行\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-条件过多，过长的时候应该换行\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5. 条件过多，过长的时候应该换行\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"if (condition1() && \\n    condition2() && \\n    condition3() && \\n    condition4()) {\\n  // Do something\\n}\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"if (condition1() && condition2() && condition3() && condition4()) {\\n  // Do something\\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"for语句\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#for语句\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" for语句\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-不可在for循环内修改循环变量，防止for循环失去控制。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-不可在for循环内修改循环变量，防止for循环失去控制。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 不可在for循环内修改循环变量，防止for循环失去控制。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"for (int index = 0; index < 10; index++) {\\n   ...\\n   logicToChange(index)\\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"switch语句\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#switch语句\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Switch语句\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-每个分支都必须用大括号括起来\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-每个分支都必须用大括号括起来\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 每个分支都必须用大括号括起来\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"switch (integer) {  \\n  case 1:  {\\n    // ...  \\n   }\\n    break;  \\n  case 2: {  \\n    // ...  \\n    break;  \\n  }  \\n  case 3: {\\n    // ...  \\n    break; \\n  }\\n  default:{\\n    // ...  \\n    break; \\n  }\\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_2-使用枚举类型时，不能有default分支，-除了使用枚举类型以外，都必须有default分支\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-使用枚举类型时，不能有default分支，-除了使用枚举类型以外，都必须有default分支\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 使用枚举类型时，不能有default分支， 除了使用枚举类型以外，都必须有default分支\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;  \\nswitch (menuType) {  \\n  case RWTLeftMenuTopItemMain: {\\n    // ...  \\n    break; \\n   }\\n  case RWTLeftMenuTopItemShows: {\\n    // ...  \\n    break; \\n  }\\n  case RWTLeftMenuTopItemSchedule: {\\n    // ...  \\n    break; \\n  }\\n}\\n\")])])]),t(\"p\",[e._v(\"在Switch语句使用枚举类型的时候，如果使用了default分支，在将来就无法通过编译器来检查新增的枚举类型了。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 函数\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-一个函数的长度尽量限制在50行以内\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-一个函数的长度尽量限制在50行以内\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 一个函数的长度尽量限制在50行以内\")]),e._v(\" \"),t(\"p\",[e._v(\"通常来说，在阅读一个函数的时候，如果视需要跨过很长的垂直距离会非常影响代码的阅读体验。如果需要来回滚动眼球或代码才能看全一个方法，就会很影响思维的连贯性，对阅读代码的速度造成比较大的影响。最好的情况是在不滚动眼球或代码的情况下一眼就能将该方法的全部代码映入眼帘。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_2-一个函数只做一件事（单一原则）\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-一个函数只做一件事（单一原则）\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 一个函数只做一件事（单一原则）\")]),e._v(\" \"),t(\"p\",[e._v(\"每个函数的职责都应该划分的很明确（就像类一样）。\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"dataConfiguration()\\nviewConfiguration()\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"void dataConfiguration()\\n{   \\n   ...\\n   viewConfiguration()\\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_3-对于有返回值的函数（方法），每一个分支都必须有返回值\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-对于有返回值的函数（方法），每一个分支都必须有返回值\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. 对于有返回值的函数（方法），每一个分支都必须有返回值\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"int function()\\n{\\n    if(condition1) {\\n        return count1\\n    }else if(condition2) {\\n        return count2\\n    }else{\\n       return defaultCount\\n    } \\n}\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"int function()\\n{\\n    if(condition1) {\\n        return count1\\n    }else if(condition2) {\\n        return count2\\n    }\\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_4-对输入参数的正确性和有效性进行检查，参数错误立即返回\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-对输入参数的正确性和有效性进行检查，参数错误立即返回\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. 对输入参数的正确性和有效性进行检查，参数错误立即返回\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"void function(param1,param2)\\n{\\n      if(param1 is unavailable) {\\n           return;\\n      }\\n    \\n      if(param2 is unavailable) {\\n           return;\\n      }\\n     //Do some right thing\\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_5-如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5. 如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数\")]),e._v(\" \"),t(\"p\",[e._v(\"原来的调用：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"void logic() {\\n  a();\\n  b()；\\n  if (logic1 condition) {\\n    c();\\n  } else {\\n    d();\\n  }\\n}\\n\")])])]),t(\"p\",[e._v(\"将a，b函数抽取出来作为单独的函数\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"void basicConfig() {\\n  a();\\n  b();\\n}\\n  \\nvoid logic1() {\\n  basicConfig();\\n  c();\\n}\\nvoid logic2() {\\n  basicConfig();\\n  d();\\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_6-将函数内部比较复杂的逻辑提取出来作为单独的函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-将函数内部比较复杂的逻辑提取出来作为单独的函数\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 6. 将函数内部比较复杂的逻辑提取出来作为单独的函数\")]),e._v(\" \"),t(\"p\",[e._v(\"一个函数内的不清晰（逻辑判断比较多，行数较多）的那片代码，往往可以被提取出去，构成一个新的函数，然后在原来的地方调用它这样你就可以使用有意义的函数名来代替注释，增加程序的可读性。\")]),e._v(\" \"),t(\"p\",[e._v(\"举一个发送邮件的例子：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"openEmailSite();\\nlogin();\\nwriteTitle(title);\\nwriteContent(content);\\nwriteReceiver(receiver);\\naddAttachment(attachment);\\nsend();\\n\")])])]),t(\"p\",[e._v(\"中间的部分稍微长一些，我们可以将它们提取出来：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"void writeEmail(title, content,receiver,attachment)\\n{\\n  writeTitle(title);\\n  writeContent(content);\\n  writeReceiver(receiver);\\n  addAttachment(attachment); \\n}\\n\")])])]),t(\"p\",[e._v(\"然后再看一下原来的代码：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"openEmailSite();\\nlogin();\\nwriteEmail(title, content,receiver,attachment)\\nsend();\\n\")])])]),t(\"h4\",{attrs:{id:\"_7-避免使用全局变量，类成员（class-member）来传递信息，尽量使用局部变量和参数。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-避免使用全局变量，类成员（class-member）来传递信息，尽量使用局部变量和参数。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 7. 避免使用全局变量，类成员（class member）来传递信息，尽量使用局部变量和参数。\")]),e._v(\" \"),t(\"p\",[e._v(\"在一个类里面，经常会有传递某些变量的情况。而如果需要传递的变量是某个全局变量或者属性的时候，有些朋友不喜欢将它们作为参数，而是在方法内部就直接访问了：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\" class A {\\n   var x;\\n   func updateX() {\\n      ...\\n      x = ...;\\n   }\\n   func printX() {\\n     updateX();\\n     print(x);\\n   }\\n }\\n\")])])]),t(\"p\",[e._v(\"我们可以看到，在printX方法里面，updateX和print方法之间并没有值的传递，乍一看我们可能不知道x从哪里来的，导致程序的可读性降低了。\")]),e._v(\" \"),t(\"p\",[e._v(\"而如果你使用局部变量而不是类成员来传递信息，那么这两个函数就不需要依赖于某一个类，而且更加容易理解，不易出错：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"func updateX() -> String {\\n    x = ...;\\n    return x;\\n }\\n func printX() {\\n   String x = updateX();\\n   print(x);\\n }\\n\")])])]),t(\"h4\",{attrs:{id:\"_8-如果一个函数有特别多的参数或者名称很长，应该将其按照-来对齐分行显示：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-如果一个函数有特别多的参数或者名称很长，应该将其按照-来对齐分行显示：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 8.如果一个函数有特别多的参数或者名称很长，应该将其按照 : 来对齐分行显示：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (id)initWithModel:(IPCModle)model\\n        ConnectType:(IPCConnectType)connectType\\n         Resolution:(IPCResolution)resolution\\n           AuthName:(NSString *)authName\\n           Password:(NSString *)password；\\n\")])])]),t(\"h3\",{attrs:{id:\"注释\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注释\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 注释\")]),e._v(\" \"),t(\"p\",[e._v(\"优秀的代码大部分是可以自描述的，我们完全可以用程代码本身来表达它到底在干什么，而不需要注释的辅助。\")]),e._v(\" \"),t(\"p\",[e._v(\"但并不是说一定不能写注释，有以下三种情况比较适合写注释：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"公共接口（注释要告诉阅读代码的人，当前类能实现什么功能）。\")]),e._v(\" \"),t(\"li\",[e._v(\"涉及到比较深层专业知识的代码（注释要体现出实现原理和思想）。\")]),e._v(\" \"),t(\"li\",[e._v(\"容易产生歧义的代码（但是严格来说，容易让人产生歧义的代码是不允许存在的）。\")])]),e._v(\" \"),t(\"p\",[e._v(\"除了上述这三种情况，如果别人只能依靠注释才能读懂你的代码的时候，就要反思代码出现了什么问题。\")]),e._v(\" \"),t(\"p\",[e._v(\"最后，对于注释的内容，相对于“做了什么”，更应该说明“为什么这么做”。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"注释的格式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注释的格式\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 注释的格式\")]),e._v(\" \"),t(\"h5\",{attrs:{id:\"单行注释\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单行注释\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 单行注释\")]),e._v(\" \"),t(\"p\",[e._v(\"注释单独一行，并与被注释的代码齐平，文字与 \"),t(\"code\",[e._v(\"//\")]),e._v(\" 之间留一个空格\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// 友盟统计事件\\nHomeHandleDataModel *handleModel = [HomeHandleDataModel sharedHandleDataModel];\\n[handleModel umengEvent:self.title];\\n\")])])]),t(\"p\",[e._v(\"注释跟在被注释代码后面时先加个空格后写 \"),t(\"code\",[e._v(\"//\")]),e._v(\" 再留个空格后写注释文字\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"UIButton *addBtn // 添加按钮\\nUILabel *nameLbl // 名字标签\\n\")])])]),t(\"h5\",{attrs:{id:\"复杂文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复杂文件\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 复杂文件\")]),e._v(\" \"),t(\"p\",[e._v(\"在复杂文件比如较大的 controller 中使用 \"),t(\"code\",[e._v(\"#pragma mark - xxx\")]),e._v(\"标签进行分隔代码功能区域，分隔清晰会保证后续需要查找摸个方法时能勾清晰查找到你需要定位的方法。\")]),e._v(\" \"),t(\"h5\",{attrs:{id:\"暴露给外部调用的接口\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#暴露给外部调用的接口\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 暴露给外部调用的接口\")]),e._v(\" \"),t(\"p\",[e._v(\"提供给别人使用的公共控件或工具类需要提供文档注释，标清方法作用及各个参数的含义。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"/**\\n 网络请求的实例方法（无缓存）\\n\\n @param type get/post\\n @param urlString 请求的地址\\n @param paraments 请求的参数\\n @param successBlock 请求成功的回调\\n @param failureBlock 请求失败的回调\\n @param progress 进度\\n */\\n+(void)requestWithType:(HttpRequestType)type\\n         withUrlString:(NSString *)urlString\\n         withParaments:(id)paraments\\n      withSuccessBlock:(HttpRequstSuccess)successBlock\\n      withFailureBlock:(HttpRequestFailureCode)failureBlock\\n              progress:(HttpDownloadProgress)progress;\\n\")])])]),t(\"h2\",{attrs:{id:\"二-oc规范\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-oc规范\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 二. OC规范\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"变量-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#变量-2\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 变量\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-变量名必须使用驼峰格式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-变量名必须使用驼峰格式\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 变量名必须使用驼峰格式\")]),e._v(\" \"),t(\"p\",[e._v(\"类，协议使用大驼峰：（首字母大写）\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"HomePageViewController.h\\n<HeaderViewDelegate>\\n\")])])]),t(\"p\",[e._v(\"对象等局部变量使用小驼峰：（首字母小写）\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('NSString *personName = @\"\";\\nNSUInteger totalCount = 0;\\n')])])]),t(\"h4\",{attrs:{id:\"_2-变量的名称必须同时包含功能与类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-变量的名称必须同时包含功能与类型\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 变量的名称必须同时包含功能与类型\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"UIButton *addBtn // 添加按钮\\nUILabel *nameLbl // 名字标签\\nNSString *addressStr // 地址字符串\\n\")])])]),t(\"h4\",{attrs:{id:\"_3-系统常用类作实例变量声明时加入后缀\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-系统常用类作实例变量声明时加入后缀\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. 系统常用类作实例变量声明时加入后缀\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"类型\\t后缀\\nUIViewController\\tVC\\nUIView\\tView\\nUILabel\\tLbl\\nUIButton\\tBtn\\nUIImage\\tImg\\nUIImageView\\tImagView\\nNSArray\\tArray\\nNSMutableArray\\tMarray\\nNSDictionary\\tDict\\nNSMutableDictionary\\tMdict\\nNSString\\tStr\\nNSMutableString\\tMStr\\nNSSet\\tSet\\nNSMutableSet\\tMset\\n\")])])]),t(\"h3\",{attrs:{id:\"常量\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常量\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 常量\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-常量以相关类名作为前缀\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-常量以相关类名作为前缀\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 常量以相关类名作为前缀\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"static const NSTimeInterval ZOCSignInViewControllerFadeOutAnimationDuration = 0.4;\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"static const NSTimeInterval fadeOutTime = 0.4;\\n\")])])]),t(\"h4\",{attrs:{id:\"_2-建议使用类型常量，不建议使用-define预处理命令\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-建议使用类型常量，不建议使用-define预处理命令\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 建议使用类型常量，不建议使用#define预处理命令\")]),e._v(\" \"),t(\"p\",[e._v(\"首先比较一下这两种声明常量的区别：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"预处理命令：简单的文本替换，不包括类型信息，并且可被任意修改。\")]),e._v(\" \"),t(\"li\",[e._v(\"类型常量：包括类型信息，并且可以设置其使用范围，而且不可被修改。\")])]),e._v(\" \"),t(\"p\",[e._v(\"使用预处理虽然能达到替换文本的目的，但是本身还是有局限性的：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"不具备类型信息。\")]),e._v(\" \"),t(\"li\",[e._v(\"可以被任意修改。\")])]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_3-对外公开某个常量：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-对外公开某个常量：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. 对外公开某个常量：\")]),e._v(\" \"),t(\"p\",[e._v(\"如果我们需要发送通知，那么就需要在不同的地方拿到通知的“频道”字符串（通知的名称），那么显然这个字符串是不能被轻易更改，而且可以在不同的地方获取。这个时候就需要定义一个外界可见的字符串常量。\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('//头文件\\nextern NSString *const ZOCCacheControllerDidClearCacheNotification;\\n//实现文件\\nstatic NSString * const ZOCCacheControllerDidClearCacheNotification = @\"ZOCCacheControllerDidClearCacheNotification\";\\nstatic const CGFloat ZOCImageThumbnailHeight = 50.0f;\\n')])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('#define CompanyName @\"Apple Inc.\" \\n#define magicNumber 42\\n')])])]),t(\"h3\",{attrs:{id:\"宏\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#宏\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 宏\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-宏、常量名都要使用大写字母，用下划线‘-’分割单词。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-宏、常量名都要使用大写字母，用下划线‘-’分割单词。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1.宏、常量名都要使用大写字母，用下划线‘_’分割单词。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('#define URL_GAIN_QUOTE_LIST @\"/v1/quote/list\"\\n#define URL_UPDATE_QUOTE_LIST @\"/v1/quote/update\"\\n#define URL_LOGIN  @\"/v1/user/login”\\n')])])]),t(\"h4\",{attrs:{id:\"_2-宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"#define MY_MIN(A, B)  ((A)>(B)?(B):(A))\\n\")])])]),t(\"h3\",{attrs:{id:\"枚举\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#枚举\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 枚举\")]),e._v(\" \"),t(\"p\",[e._v(\"根据Objective-C的方式定义，根据官方SDK中的定义标准方式来定义枚举类型。（注：要对每个枚举类型进行注释，介绍该枚举类代表含义;枚举类型命名要加相关类名前缀并且枚举值命名要加枚举类型前缀.）\")]),e._v(\" \"),t(\"p\",[e._v(\"例：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"  /*  用来设置动画的过渡效果 */\\n  typedef NS_ENUM(NSInteger, UIViewAnimationTransition) {\\n  \\t\\tUIViewAnimationTransitionNone,///这个是正常的（也就是没有过渡效果）\\n\\t\\tUIViewAnimationTransitionFlipFromLeft, ///从左向右翻转\\n\\t\\tUIViewAnimationTransitionFlipFromRight, ///从右向左翻转\\n\\t\\tUIViewAnimationTransitionCurlUp, ///从下向上卷(效果类似正着翻书)\\n\\t\\tUIViewAnimationTransitionCurlDown,///从上向下卷（效果类似于反着翻书）\\n   };\\n\")])])]),t(\"h3\",{attrs:{id:\"cgrect函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cgrect函数\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" CGRect函数\")]),e._v(\" \"),t(\"p\",[e._v(\"其实iOS内部已经提供了相应的获取CGRect各个部分的函数了，它们的可读性比较高，而且简短，推荐使用：\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"CGRect frame = self.view.frame; \\nCGFloat x = CGRectGetMinX(frame); \\nCGFloat y = CGRectGetMinY(frame); \\nCGFloat width = CGRectGetWidth(frame); \\nCGFloat height = CGRectGetHeight(frame); \\nCGRect frame = CGRectMake(0.0, 0.0, width, height);\\n\")])])]),t(\"p\",[e._v(\"而不是\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"CGRect frame = self.view.frame;  \\nCGFloat x = frame.origin.x;  \\nCGFloat y = frame.origin.y;  \\nCGFloat width = frame.size.width;  \\nCGFloat height = frame.size.height;  \\nCGRect frame = (CGRect){ .origin = CGPointZero, .size = frame.size };\\n\")])])]),t(\"h3\",{attrs:{id:\"泛型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 泛型\")]),e._v(\" \"),t(\"p\",[e._v(\"建议在定义NSArray和NSDictionary时使用泛型，可以保证程序的安全性：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('NSArray<NSString *> *testArr = [NSArray arrayWithObjects:@\"Hello\", @\"world\", nil];\\nNSDictionary<NSString *, NSNumber *> *dic = @{@\"key\":@(1), @\"age\":@(10)};\\n')])])]),t(\"h3\",{attrs:{id:\"block\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#block\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Block\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"为常用的block类型创建typedef\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为常用的block类型创建typedef\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 为常用的Block类型创建typedef\")]),e._v(\" \"),t(\"p\",[e._v(\"如果我们需要重复创建某种block（相同参数，返回值）的变量，我们就可以通过typedef来给某一种块定义属于它自己的新类型\")]),e._v(\" \"),t(\"p\",[e._v(\"例如：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"int (^variableName)(BOOL flag, int value) =^(BOOL flag, int value){\\n     // Implementation\\n     return someInt;\\n}\\n\")])])]),t(\"p\",[e._v(\"这个Block有一个bool参数和一个int参数，并返回int类型。我们可以给它定义类型：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"int(^EOCSomeBlock)(BOOL flag, int value);\\n\")])])]),t(\"p\",[e._v(\"再次定义的时候，就可以通过简单的赋值来实现：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"EOCSomeBlock block = ^(BOOL flag, int value){\\n// Implementation\\n};\\n\")])])]),t(\"h4\",{attrs:{id:\"定义作为参数的block：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义作为参数的block：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 定义作为参数的Block：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"(void)startWithCompletionHandler: (void(^)(NSData data, NSError error))completion;\\n\")])])]),t(\"p\",[e._v(\"这里的Block有一个NSData参数，一个NSError参数并没有返回值\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"typedef void(^EOCCompletionHandler)(NSData data, NSError error);\\n\\n(void)startWithCompletionHandler:(EOCCompletionHandler)completion;\\n\")])])]),t(\"p\",[e._v(\"通过typedef定义Block签名的好处是:如果要某种块增加参数，那么只修改定义签名的那行代码即可。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"字面量语法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字面量语法\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 字面量语法\")]),e._v(\" \"),t(\"p\",[e._v(\"尽量使用字面量值来创建 NSString , NSDictionary , NSArray , NSNumber 这些不可变对象：\\n推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('NSArray *names = @[@\"Brian\", @\"Matt\", @\"Chris\", @\"Alex\", @\"Steve\", @\"Paul\"];\\nNSDictionary *productManagers = @{@\"iPhone\" : @\"Kate\", @\"iPad\" : @\"Kamal\", @\"Mobile Web\" : @\"Bill\"}; \\nNSNumber *shouldUseLiterals = @YES;NSNumber *buildingZIPCode = @10018;\\n')])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('NSArray *names = [NSArray arrayWithObjects:@\"Brian\", @\"Matt\", @\"Chris\", @\"Alex\", @\"Steve\", @\"Paul\", nil];\\nNSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @\"Kate\", @\"iPhone\", @\"Kamal\", @\"iPad\", @\"Bill\" ];\\nNSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018];\\n')])])]),t(\"h3\",{attrs:{id:\"属性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 属性\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-属性的命名使用小驼峰\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-属性的命名使用小驼峰\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 属性的命名使用小驼峰\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@property (nonatomic, readwrite, strong) UIButton *confirmButton;\\n\")])])]),t(\"h4\",{attrs:{id:\"_2-属性的关键字推荐按照-原子性，读写，内存管理的顺序排列\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-属性的关键字推荐按照-原子性，读写，内存管理的顺序排列\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 属性的关键字推荐按照 原子性，读写，内存管理的顺序排列\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@property (nonatomic, readwrite, copy) NSString *name;\\n@property (nonatomic, readonly, copy) NSString *gender;\\n@property (nonatomic, readwrite, strong) UIView *headerView;\\n\")])])]),t(\"h4\",{attrs:{id:\"_3-block属性应该使用copy关键字\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-block属性应该使用copy关键字\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. Block属性应该使用copy关键字\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"typedef void (^ErrorCodeBlock) (id errorCode,NSString *message);\\n@property (nonatomic, readwrite, copy) ErrorCodeBlock errorBlock;//将block拷贝到堆中\\n\")])])]),t(\"h4\",{attrs:{id:\"_4-形容词性的bool属性的getter应该加上is前缀\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-形容词性的bool属性的getter应该加上is前缀\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. 形容词性的BOOL属性的getter应该加上is前缀\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@property (assign, getter=isEditable) BOOL editable;\\n\")])])]),t(\"h4\",{attrs:{id:\"_5-使用getter方法做懒加载\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-使用getter方法做懒加载\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5. 使用getter方法做懒加载\")]),e._v(\" \"),t(\"p\",[e._v(\"实例化一个对象是需要耗费资源的，如果这个对象里的某个属性的实例化要调用很多配置和计算，就需要懒加载它，在使用它的前一刻对它进行实例化：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('- (NSDateFormatter *)dateFormatter {\\n    if (!_dateFormatter) {\\n           _dateFormatter = [[NSDateFormatter alloc] init];\\n           NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_US_POSIX\"];\\n           [_dateFormatter setLocale:enUSPOSIXLocale];\\n           [_dateFormatter setDateFormat:@\"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\"];\\n    } \\n    return _dateFormatter;\\n}\\n')])])]),t(\"p\",[e._v(\"但是也有对这种做法的争议：getter方法可能会产生某些副作用，例如如果它修改了全局变量，可能会产生难以排查的错误。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_6-除了init和dealloc方法，建议都使用点语法访问属性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-除了init和dealloc方法，建议都使用点语法访问属性\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 6. 除了init和dealloc方法，建议都使用点语法访问属性\")]),e._v(\" \"),t(\"p\",[e._v(\"使用点语法的好处：\")]),e._v(\" \"),t(\"p\",[e._v(\"setter：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"setter会遵守内存管理语义(strong, copy, weak)。\")]),e._v(\" \"),t(\"li\",[e._v(\"通过在内部设置断点，有助于调试bug。\")]),e._v(\" \"),t(\"li\",[e._v(\"可以过滤一些外部传入的值。\")]),e._v(\" \"),t(\"li\",[e._v(\"捕捉KVO通知。\")])]),e._v(\" \"),t(\"p\",[e._v(\"getter：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"允许子类化。\")]),e._v(\" \"),t(\"li\",[e._v(\"通过在内部设置断点，有助于调试bug。\")]),e._v(\" \"),t(\"li\",[e._v(\"实现懒加载（lazy initialization）。\")])]),e._v(\" \"),t(\"p\",[e._v(\"注意：\")]),e._v(\" \"),t(\"p\",[e._v(\"懒加载的属性，必须通过点语法来读取数据。因为懒加载是通过重写getter方法来初始化实例变量的，如果不通过属性来读取该实例变量，那么这个实例变量就永远不会被初始化。\")]),e._v(\" \"),t(\"p\",[e._v(\"在init和dealloc方法里面使用点语法的后果是：因为没有绕过setter和getter，在setter和getter里面可能会有很多其他的操作。而且如果它的子类重载了它的setter和getter方法，那么就可能导致该子类调用其他的方法。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_7-不要滥用点语法，要区分好方法调用和属性访问\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-不要滥用点语法，要区分好方法调用和属性访问\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 7. 不要滥用点语法，要区分好方法调用和属性访问\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"view.backgroundColor = [UIColor orangeColor]; \\n[UIApplication sharedApplication].delegate;\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"[view setBackgroundColor:[UIColor orangeColor]]; \\nUIApplication.sharedApplication.delegate;\\n\")])])]),t(\"h4\",{attrs:{id:\"_8-尽量使用不可变对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-尽量使用不可变对象\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 8. 尽量使用不可变对象\")]),e._v(\" \"),t(\"p\",[e._v(\"建议尽量把对外公布出来的属性设置为只读，在实现文件内部设为读写。具体做法是：\")]),e._v(\" \"),t(\"p\",[e._v(\"在头文件中，设置对象属性为 \"),t(\"code\",[e._v(\"readonly\")]),e._v(\" 在实现文件中设置为\"),t(\"code\",[e._v(\"readwrite\")]),e._v(\"。\\n这样一来，在外部就只能读取该数据，而不能修改它，使得这个类的实例所持有的数据更加安全。\\n而且，对于集合类的对象，更应该仔细考虑是否可以将其设为可变的。如果在公开部分只能设置其为只读属性，那么就在非公开部分存储一个可变型。所以当在外部获取这个属性时，获取的只是内部可变型的一个不可变版本,例如：\")]),e._v(\" \"),t(\"p\",[e._v(\"在公共API中：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface EOCPerson : NSObject\\n\\n@property (nonatomic, copy, readonly) NSString firstName;\\n@property (nonatomic, copy, readonly) NSString lastName;\\n@property (nonatomic, strong, readonly) NSSet *friends //向外公开的不可变集合\\n\\n- (id)initWithFirstName:(NSString)firstName andLastName:(NSString)lastName;\\n- (void)addFriend:(EOCPerson*)person;\\n- (void)removeFriend:(EOCPerson*)person;\\n@end\\n\")])])]),t(\"blockquote\",[t(\"p\",[e._v(\"在这里，我们将friends属性设置为不可变的set。然后，提供了来增加和删除这个set里的元素的公共接口。\\n在实现文件里：\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface EOCPerson ()\\n\\n@property (nonatomic, copy, readwrite) NSString firstName;\\n@property (nonatomic, copy, readwrite) NSString lastName;\\n\\n@end\\n\\n@implementation EOCPerson {\\nNSMutableSet *_internalFriends; //实现文件里的可变集合\\n}\\n\\n- (NSSet*)friends {\\nreturn [_internalFriends copy]; //get方法返回的永远是可变set的不可变型\\n}\\n\\n- (void)addFriend:(EOCPerson*)person {\\n[_internalFriends addObject:person]; //在外部增加集合元素的操作\\n//do something when add element\\n}\\n\\n- (void)removeFriend:(EOCPerson*)person {\\n[_internalFriends removeObject:person]; //在外部移除元素的操作\\n//do something when remove element\\n}\\n\\n- (id)initWithFirstName:(NSString)firstName andLastName:(NSString)lastName {\\n\\nif ((self = [super init])) {\\n\\n_firstName = firstName;\\n_lastName = lastName;\\n_internalFriends = [NSMutableSet new];\\n}\\nreturn self;\\n}\\n\")])])]),t(\"p\",[e._v(\"我们可以看到，在实现文件里，保存一个可变set来记录外部的增删操作。\\n这里最重要的代码是：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (NSSet*)friends {\\nreturn [_internalFriends copy];\\n}\\n\")])])]),t(\"blockquote\",[t(\"p\",[e._v(\"这个是friends属性的获取方法：它将当前保存的可变set复制了一不可变的set并返回。因此，外部读取到的set都将是不可变的版本。\")])]),e._v(\" \"),t(\"h3\",{attrs:{id:\"方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 方法\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-方法名中不应使用and，而且签名要与对应的参数名保持高度一致\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-方法名中不应使用and，而且签名要与对应的参数名保持高度一致\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 方法名中不应使用and，而且签名要与对应的参数名保持高度一致\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height;\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (instancetype)initWithWidth:(CGFloat)width andHeight:(CGFloat)height;\\n- (instancetype)initWith:(int)width and:(int)height;\\n\")])])]),t(\"h4\",{attrs:{id:\"_2-方法实现时，如果参数过长，则令每个参数占用一行，以冒号对齐。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-方法实现时，如果参数过长，则令每个参数占用一行，以冒号对齐。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 方法实现时，如果参数过长，则令每个参数占用一行，以冒号对齐。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (void)doSomethingWith:(NSString *)theFoo\\n                   rect:(CGRect)theRect\\n               interval:(CGFloat)theInterval\\n{\\n   //Implementation\\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_3-私有方法应该在实现文件中申明。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-私有方法应该在实现文件中申明。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. 私有方法应该在实现文件中申明。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface ViewController ()\\n- (void)basicConfiguration;\\n@end\\n@implementation ViewController\\n- (void)basicConfiguration\\n{\\n   //Do some basic configuration\\n}\\n@end\\n\")])])]),t(\"h4\",{attrs:{id:\"_4-方法名用小写字母开头的单词组合而成\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-方法名用小写字母开头的单词组合而成\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. 方法名用小写字母开头的单词组合而成\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (NSString *)descriptionWithLocale:(id)locale;\\n\")])])]),t(\"h4\",{attrs:{id:\"_5-方法名前缀\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-方法名前缀\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5. 方法名前缀\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"刷新视图的方法名要以refresh为首。\")]),e._v(\" \"),t(\"li\",[e._v(\"更新数据的方法名要以update为首。\\n推荐这样写：\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (void)refreshHeaderViewWithCount:(NSUInteger)count;\\n- (void)updateDataSourceWithViewModel:(ViewModel*)viewModel;\\n\")])])]),t(\"h3\",{attrs:{id:\"面向协议编程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向协议编程\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 面向协议编程\")]),e._v(\" \"),t(\"p\",[e._v(\"如果某些功能（方法）具备可复用性，我们就需要将它们抽取出来放入一个抽象接口文件中（在iOS中，抽象接口即协议），让不同类型的对象遵循这个协议，从而拥有相同的功能。\")]),e._v(\" \"),t(\"p\",[e._v(\"因为协议是不依赖于某个对象的，所以通过协议，我们可以解开两个对象之间的耦合。如何理解呢？我们来看一下下面这个例子：\")]),e._v(\" \"),t(\"p\",[e._v(\"现在有一个需求：在一个UITableViewController里面拉取feed并展示出来。\")]),e._v(\" \"),t(\"p\",[e._v(\"方案一：\\n定义一个拉取feed的类ZOCFeedParser，这个类有一些代理方法实现feed相关功能：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@protocol ZOCFeedParserDelegate <NSObject>\\n@optional\\n- (void)feedParserDidStart:(ZOCFeedParser *)parser;\\n- (void)feedParser:(ZOCFeedParser *)parser didParseFeedInfo:(ZOCFeedInfoDTO *)info; \\n- (void)feedParser:(ZOCFeedParser *)parser didParseFeedItem:(ZOCFeedItemDTO *)item; \\n- (void)feedParserDidFinish:(ZOCFeedParser *)parser;\\n- (void)feedParser:(ZOCFeedParser *)parser didFailWithError:(NSError *)error;@end \\n@interface ZOCFeedParser : NSObject\\n@property (nonatomic, weak) id <ZOCFeedParserDelegate> delegate; \\n@property (nonatomic, strong) NSURL *url; \\n- (id)initWithURL:(NSURL *)url; \\n- (BOOL)start; \\n- (void)stop; \\n@end\\n\")])])]),t(\"p\",[e._v(\"然后在ZOCTableViewController里面传入ZOCFeedParser，并遵循其代理方法，实现feed的拉取功能。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface ZOCTableViewController : UITableViewController<ZOCFeedParserDelegate>\\n- (instancetype)initWithFeedParser:(ZOCFeedParser *)feedParser; \\n@end\\n\")])])]),t(\"p\",[e._v(\"具体应用：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('NSURL *feedURL = [NSURL URLWithString:@\"http://bbc.co.uk/feed.rss\"]; \\nZOCFeedParser *feedParser = [[ZOCFeedParser alloc] initWithURL:feedURL]; \\nZOCTableViewController *tableViewController = [[ZOCTableViewController alloc] initWithFeedParser:feedParser]; \\nfeedParser.delegate = tableViewController;\\n')])])]),t(\"p\",[e._v(\"OK，现在我们实现了需求：在ZOCTableViewController里面存放了一个ZOCFeedParser对象来处理feed的拉取功能。\")]),e._v(\" \"),t(\"p\",[e._v(\"但这里有一个严重的耦合问题：ZOCTableViewController只能通过ZOCFeedParser对象来处理feed的拉取功能。\\n于是我们重新审视一下这个需求：其实我们实际上只需要ZOCTableViewController拉取feed就可以了，而具体是由哪个对象来拉取，ZOCTableViewController并不需要关心。\")]),e._v(\" \"),t(\"p\",[e._v(\"也就是说，我们需要提供给ZOCTableViewController的是一个更范型的对象，这个对象具备了拉取feed的功能就好了，而不应该仅仅局限于某个具体的对象（ZOCFeedParser）。所以，刚才的设计需要重新做一次修改：\")]),e._v(\" \"),t(\"p\",[e._v(\"方案二：\\n首先需要在一个接口文件ZOCFeedParserProtocol.h里面定义抽象的，具有拉取feed功能的协议：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@protocol ZOCFeedParserDelegate <NSObject>\\n@optional\\n- (void)feedParserDidStart:(id<ZOCFeedParserProtocol>)parser;\\n- (void)feedParser:(id<ZOCFeedParserProtocol>)parser didParseFeedInfo:(ZOCFeedInfoDTO *)info; \\n- (void)feedParser:(id<ZOCFeedParserProtocol>)parser didParseFeedItem:(ZOCFeedItemDTO *)item; \\n- (void)feedParserDidFinish:(id<ZOCFeedParserProtocol>)parser;\\n- (void)feedParser:(id<ZOCFeedParserProtocol>)parser didFailWithError:(NSError *)error;@end \\n@protocol ZOCFeedParserProtocol <NSObject>\\n@property (nonatomic, weak) id <ZOCFeedParserDelegate> delegate; \\n@property (nonatomic, strong) NSURL *url;\\n- (BOOL)start;\\n- (void)stop;\\n@end\\n\")])])]),t(\"p\",[e._v(\"而原来的ZOCFeedParser仅仅是需要遵循上面这个协议就具备了拉取feed的功能：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface ZOCFeedParser : NSObject <ZOCFeedParserProtocol> \\n- (id)initWithURL:(NSURL *)url;//仅仅需要通过传入url即可，其他事情都交给ZOCFeedParserProtocol@end\\n而且，ZOCTableViewController也不直接依赖于ZOCFeedParser对象，我们只需要传给它一个遵循<ZOCFeedParserProtocol>的对象即可。\\n\\n@interface ZOCTableViewController : UITableViewController <ZOCFeedParserDelegate>\\n- (instancetype)initWithFeedParser:(id<ZOCFeedParserProtocol>)feedParser;\\n@end\\n\")])])]),t(\"p\",[e._v(\"这样一来，ZOCTableViewController和ZOCFeedParser之间就没有直接的关系了。以后，如果我们想：\")]),e._v(\" \"),t(\"p\",[e._v(\"给这个feed拉取器增加新的功能：仅需要修改ZOCFeedParserProtocol.h文件。\\n更换一个feed拉取器实例：创建一个新类型来遵循ZOCFeedParserProtocol.h即可。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"ios-中委托的设计\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ios-中委托的设计\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" iOS 中委托的设计\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-要区分好代理和数据源的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-要区分好代理和数据源的区别\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 要区分好代理和数据源的区别\")]),e._v(\" \"),t(\"p\",[e._v(\"在iOS开发中的委托模式包含了delegate（代理）和datasource（数据源）。虽然二者同属于委托模式，但是这两者是有区别的。这个区别就是二者的信息流方向是不同的：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"delegate ：事件发生的时候，委托者需要通知代理。（信息流从委托者到代理）\")]),e._v(\" \"),t(\"li\",[e._v(\"datasource：委托者需要从数据源拉取数据。（信息流从数据源到委托者）\")])]),e._v(\" \"),t(\"p\",[e._v(\"然而包括苹果也没有做好榜样，将它们彻底的区分开。就拿UITableView来说，在它的delegate方法中有一个方法：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath;\\n\")])])]),t(\"p\",[e._v(\"这个方法正确地体现了代理的作用：委托者（tableview）告诉代理（控制器）“我的某个cell被点击了”。但是，UITableViewDelegate的方法列表里还有这个方法：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;\\n\")])])]),t(\"p\",[e._v(\"该方法的作用是 由控制器来告诉tabievlew的行高，也就是说，它的信息流是从控制器（数据源）到委托者（tableview）的。准确来讲，它应该是一个数据源方法，而不是代理方法。\")]),e._v(\" \"),t(\"p\",[e._v(\"在UITableViewDataSource中，就有标准的数据源方法：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView;\\n这个方法的作用就是让tableview向控制器拉取一个section数量的数据。\\n\")])])]),t(\"p\",[e._v(\"所以，在我们设计一个视图控件的代理和数据源时，一定要区分好二者的区别，合理地划分哪些方法属于代理方法，哪些方法属于数据源方法。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_2-代理方法的第一个参数必须为委托者\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-代理方法的第一个参数必须为委托者\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 代理方法的第一个参数必须为委托者\")]),e._v(\" \"),t(\"p\",[e._v(\"代理方法必须以委托者作为第一个参数（参考UITableViewDelegate）的方法。其目的是为了区分不同委托着的实例。因为同一个控制器是可以作为多个tableview的代理的。若要区分到底是哪个tableview的cell被点击了，就需要在\"),t(\"code\",[e._v(\"- (void)tableView:(UITableView )tableView didSelectRowAtIndexPath:(NSIndexPath )indexPath\")]),e._v(\"方法中做个区分。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_3-向代理发送消息时需要判断其是否实现该方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-向代理发送消息时需要判断其是否实现该方法\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3.向代理发送消息时需要判断其是否实现该方法\")]),e._v(\" \"),t(\"p\",[e._v(\"在委托着向代理发送消息的时候，需要判断委托着是否实现了这个代理方法:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"if ([self.delegate respondsToSelector:@selector(signUpViewControllerDidPressSignUpButton:)]) { \\n [self.delegate signUpViewControllerDidPressSignUpButton:self]; \\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_4-遵循代理过多的时候，换行对齐显示\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-遵循代理过多的时候，换行对齐显示\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. 遵循代理过多的时候，换行对齐显示\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface ShopViewController () <UIGestureRecognizerDelegate,\\n                                  HXSClickEventDelegate,\\n                                  UITableViewDelegate,\\n                                  UITableViewDataSource>\\n\")])])]),t(\"h4\",{attrs:{id:\"_5-代理的方法需要明确必须执行和可不执行\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-代理的方法需要明确必须执行和可不执行\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5. 代理的方法需要明确必须执行和可不执行\")]),e._v(\" \"),t(\"p\",[e._v(\"代理方法在默认情况下都是必须执行的，然而在设计一组代理方法的时候，有些方法可以不是必须执行（是因为存在默认配置），这些方法就需要使用@optional关键字来修饰：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@protocol ZOCServiceDelegate <NSObject>\\n@optional\\n- (void)generalService:(ZOCGeneralService *)service didRetrieveEntries:(NSArray *)entries; \\n@end\\n\")])])]),t(\"h3\",{attrs:{id:\"类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 类\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-类的名称应该以多个大写字母为前缀；创建子类的时候，应该把代表子类特点的部分放在前缀和父类名的中间\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-类的名称应该以多个大写字母为前缀；创建子类的时候，应该把代表子类特点的部分放在前缀和父类名的中间\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 类的名称应该以多个大写字母为前缀；创建子类的时候，应该把代表子类特点的部分放在前缀和父类名的中间\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//父类\\nZOCSalesListViewController\\n//子类\\nZOCDaySalesListViewController\\nZOCMonthSalesListViewController\\n\")])])]),t(\"h4\",{attrs:{id:\"_2-initializer-dealloc\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-initializer-dealloc\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. initializer && dealloc\")]),e._v(\" \"),t(\"h5\",{attrs:{id:\"_2-1-dealloc方法里面应该直接访问实例变量，不应该用点语法访问\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-dealloc方法里面应该直接访问实例变量，不应该用点语法访问\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2.1 dealloc方法里面应该直接访问实例变量，不应该用点语法访问\")]),e._v(\" \"),t(\"h5\",{attrs:{id:\"_2-2-init方法的写法：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-init方法的写法：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2.2 init方法的写法：\")]),e._v(\" \"),t(\"p\",[e._v(\"init方法返回类型必须是instancetype，不能是id。\\n必须先实现[super init]。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (instancetype)init { \\n    self = [super init]; // call the designated initializer \\n    if (self) { \\n        // Custom initialization \\n    } \\n    return self; \\n}\\n\")])])]),t(\"h4\",{attrs:{id:\"_3-所有返回类对象和实例对象的方法都应该使用instancetype\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-所有返回类对象和实例对象的方法都应该使用instancetype\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. 所有返回类对象和实例对象的方法都应该使用instancetype\")]),e._v(\" \"),t(\"p\",[e._v(\"将instancetype关键字作为返回值的时候，可以让编译器进行类型检查，同时适用于子类的检查，这样就保证了返回类型的正确性（一定为当前的类对象或实例对象）\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface ZOCPerson\\n+ (instancetype)personWithName:(NSString *)name; \\n@end\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface ZOCPerson\\n+ (id)personWithName:(NSString *)name; \\n@end\\n\")])])]),t(\"h4\",{attrs:{id:\"_4-在类的头文件中尽量少引用其他头文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-在类的头文件中尽量少引用其他头文件\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. 在类的头文件中尽量少引用其他头文件\")]),e._v(\" \"),t(\"p\",[e._v(\"有时，类A需要将类B的实例变量作为它公共API的属性。这个时候，我们不应该引入类B的头文件，而应该使用向前声明（forward declaring）使用class关键字，并且在A的实现文件引用B的头文件。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('// EOCPerson.h\\n#import <Foundation/Foundation.h>\\n@class EOCEmployer;\\n@interface EOCPerson : NSObject\\n@property (nonatomic, copy) NSString *firstName;\\n@property (nonatomic, copy) NSString *lastName;\\n@property (nonatomic, strong) EOCEmployer *employer;//将EOCEmployer作为属性\\n@end\\n// EOCPerson.m\\n#import \"EOCEmployer.h\"\\n')])])]),t(\"p\",[e._v(\"这样做有什么优点呢：\")]),e._v(\" \"),t(\"p\",[e._v(\"不在A的头文件中引入B的头文件，就不会一并引入B的全部内容，这样就减少了编译时间。\\n可以避免循环引用：因为如果两个类在自己的头文件中都引入了对方的头文件，那么就会导致其中一个类无法被正确编译。\")]),e._v(\" \"),t(\"p\",[e._v(\"但是个别的时候，必须在头文件中引入其他类的头文件:\")]),e._v(\" \"),t(\"p\",[e._v(\"主要有两种情况：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"该类继承于某个类，则应该引入父类的头文件。\")]),e._v(\" \"),t(\"li\",[e._v(\"该类遵从某个协议，则应该引入该协议的头文件。而且最好将协议单独放在一个头文件中。\")])]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_5-类的布局\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-类的布局\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5. 类的布局\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"#pragma mark - Life Cycle Methods\\n- (instancetype)init\\n- (void)dealloc\\n- (void)viewWillAppear:(BOOL)animated\\n- (void)viewDidAppear:(BOOL)animated\\n- (void)viewWillDisappear:(BOOL)animated\\n- (void)viewDidDisappear:(BOOL)animated\\n#pragma mark - Override Methods\\n#pragma mark - Intial Methods\\n#pragma mark - Network Methods\\n#pragma mark - Target Methods\\n#pragma mark - Public Methods\\n#pragma mark - Private Methods\\n#pragma mark - DataSource  \\n#pragma mark - Delegate  \\n#pragma mark - Lazy Loads\\n#pragma mark - NSCopying  \\n#pragma mark - NSObject  Methods\\n\")])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('#import \"ViewController.h\"\\n#import <WebKit/WebKit.h>\\n\\n@interface ViewController ()<WKUIDelegate, WKNavigationDelegate>\\n\\n@property (nonatomic, strong) WKWebView *webView;\\n\\n@end\\n\\n@implementation ViewController\\n\\n#pragma mark - lifecycle\\n- (void)viewDidLoad\\n{\\n    [super viewDidLoad];\\n\\n    self.view.backgroundColor = [UIColor redColor];\\n    \\n    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@\"reload\" style:UIBarButtonItemStyleDone target:self action:@selector(reload)];\\n    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@\"save\" style:UIBarButtonItemStyleDone target:self action:@selector(save)];\\n    \\n    [self.view addSubview:self.webView];\\n}\\n\\n- (void)viewWillLayoutSubviews\\n{\\n    [super viewWillLayoutSubviews];\\n    \\n    self.webView.frame = self.view.bounds;\\n}\\n\\n#pragma mark - WKNavigationDelegate\\n// 页面开始加载时调用\\n- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation\\n{\\n    NSLog(@\"didStartProvisionalNavigation---%@\", navigation);\\n}\\n\\n#pragma mark - WKUIDelegate\\n// 创建一个新的WebView\\n- (WKWebView *)webView:(WKWebView *)webView createWebViewWithConfiguration:(WKWebViewConfiguration *)configuration forNavigationAction:(WKNavigationAction *)navigationAction windowFeatures:(WKWindowFeatures *)windowFeatures\\n{\\n    return [[WKWebView alloc] init];\\n}\\n\\n#pragma mark - private method\\n- (void)reload\\n{\\n    [self.webView reload];\\n}\\n\\n- (void)save\\n{\\n    NSString *lJs = @\"document.documentElement.innerHTML\";\\n    [self.webView evaluateJavaScript:lJs completionHandler:^(id _Nullable str, NSError * _Nullable error) {\\n        NSLog(@\"%@\", str);\\n    }];\\n}\\n\\n#pragma mark - Lazy Loads\\n- (WKWebView *)webView\\n{\\n    if (!_webView) {\\n        _webView = [[WKWebView alloc] init];\\n        _webView.UIDelegate = self;\\n        _webView.navigationDelegate = self;\\n        _webView.backgroundColor = [UIColor yellowColor];\\n    }\\n    return _webView;\\n}\\n\\n@end\\n')])])]),t(\"h3\",{attrs:{id:\"分类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分类\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 分类\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-分类添加的方法需要添加前缀和下划线\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-分类添加的方法需要添加前缀和下划线\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 分类添加的方法需要添加前缀和下划线\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface NSDate (ZOCTimeExtensions)\\n - (NSString *)zoc_timeAgoShort;\\n@end\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"@interface NSDate (ZOCTimeExtensions) \\n- (NSString *)timeAgoShort;\\n@end\\n\")])])]),t(\"h4\",{attrs:{id:\"_2-把类的实现代码分散到便于管理的多个分类中\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-把类的实现代码分散到便于管理的多个分类中\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 把类的实现代码分散到便于管理的多个分类中\")]),e._v(\" \"),t(\"p\",[e._v(\"一个类可能会有很多公共方法，而且这些方法往往可以用某种特有的逻辑来分组。我们可以利用Objecctive-C的分类机制，将类的这些方法按一定的逻辑划入几个分区中。\")]),e._v(\" \"),t(\"p\",[e._v(\"先看一个没有使用无分类的类：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"#import <Foundation/Foundation.h>\\n@interface EOCPerson : NSObject\\n@property (nonatomic, copy, readonly) NSString *firstName;\\n@property (nonatomic, copy, readonly) NSString *lastName;\\n@property (nonatomic, strong, readonly) NSArray *friends;\\n- (id)initWithFirstName:(NSString*)firstName andLastName:(NSString*)lastName;\\n/* Friendship methods */\\n- (void)addFriend:(EOCPerson*)person;\\n- (void)removeFriend:(EOCPerson*)person;\\n- (BOOL)isFriendsWith:(EOCPerson*)person;\\n/* Work methods */\\n- (void)performDaysWork;\\n- (void)takeVacationFromWork;\\n/* Play methods */\\n- (void)goToTheCinema;\\n- (void)goToSportsGame;\\n@end\\n\")])])]),t(\"p\",[e._v(\"分类之后：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"#import <Foundation/Foundation.h>\\n@interface EOCPerson : NSObject\\n@property (nonatomic, copy, readonly) NSString *firstName;\\n@property (nonatomic, copy, readonly) NSString *lastName;\\n@property (nonatomic, strong, readonly) NSArray *friends;\\n- (id)initWithFirstName:(NSString*)firstName\\nandLastName:(NSString*)lastName;\\n@end\\n@interface EOCPerson (Friendship)\\n- (void)addFriend:(EOCPerson*)person;\\n- (void)removeFriend:(EOCPerson*)person;\\n- (BOOL)isFriendsWith:(EOCPerson*)person;\\n@end\\n@interface EOCPerson (Work)\\n- (void)performDaysWork;\\n- (void)takeVacationFromWork;\\n@end\\n@interface EOCPerson (Play)\\n- (void)goToTheCinema;\\n- (void)goToSportsGame;\\n@end\\n\")])])]),t(\"p\",[e._v(\"其中，FriendShip分类的实现代码可以这么写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('// EOCPerson+Friendship.h\\n#import \"EOCPerson.h\"\\n@interface EOCPerson (Friendship)\\n- (void)addFriend:(EOCPerson*)person;\\n- (void)removeFriend:(EOCPerson*)person;\\n- (BOOL)isFriendsWith:(EOCPerson*)person;\\n@end\\n// EOCPerson+Friendship.m\\n#import \"EOCPerson+Friendship.h\"\\n@implementation EOCPerson (Friendship)\\n- (void)addFriend:(EOCPerson*)person {\\n /* ... */\\n}\\n- (void)removeFriend:(EOCPerson*)person {\\n /* ... */\\n}\\n- (BOOL)isFriendsWith:(EOCPerson*)person {\\n /* ... */\\n}\\n@end\\n')])])]),t(\"p\",[e._v(\"注意：在新建分类文件时，一定要引入被分类的类文件。\")]),e._v(\" \"),t(\"p\",[e._v(\"通过分类机制，可以把类代码分成很多个易于管理的功能区，同时也便于调试。因为分类的方法名称会包含分类的名称，可以马上看到该方法属于哪个分类中。\")]),e._v(\" \"),t(\"p\",[e._v(\"利用这一点，我们可以创建名为Private的分类，将所有私有方法都放在该类里。这样一来，我们就可以根据private一词的出现位置来判断调用的合理性，这也是一种编写“自我描述式代码（self-documenting）”的办法。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"单例\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单例\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 单例\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-单例不能作为容器对象来使用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-单例不能作为容器对象来使用\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 单例不能作为容器对象来使用\")]),e._v(\" \"),t(\"p\",[e._v(\"单例对象不应该暴露出任何属性，也就是说它不能作为让外部存放对象的容器。它应该是一个处理某些特定任务的工具，比如在iOS中的GPS和加速度传感器。我们只能从他们那里得到一些特定的数据。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_2-使用dispatch-once来生成单例\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-使用dispatch-once来生成单例\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 使用dispatch_once来生成单例\")]),e._v(\" \"),t(\"p\",[e._v(\"推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"+ (instancetype)sharedInstance { \\n static id sharedInstance = nil; \\n static dispatch_once_t onceToken = 0;\\n       dispatch_once(&onceToken, ^{ \\n  sharedInstance = [[self alloc] init];\\n  }); \\n return sharedInstance; \\n}\\n\")])])]),t(\"p\",[e._v(\"不推荐这样写：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"+ (instancetype)sharedInstance { \\n static id sharedInstance; \\n @synchronized(self) { \\n if (sharedInstance == nil) { \\n  \\tsharedInstance = [[MyClass alloc] init]; \\n } } \\n return sharedInstance; \\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"相等性的判断\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#相等性的判断\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 相等性的判断\")]),e._v(\" \"),t(\"p\",[e._v(\"判断两个person类是否相等的合理做法：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"-  (BOOL)isEqual:(id)object {\\n    if (self == object) {  \\n    \\treturn YES; //判断内存地址\\n \\t } \\n  \\t if (![object isKindOfClass:[ZOCPerson class]]) { \\n     \\treturn NO; //是否为当前类或派生类 \\n  \\t } \\n \\treturn [self isEqualToPerson:(ZOCPerson *)object]; \\n}\\n\\n//自定义的判断相等性的方法\\n-  (BOOL)isEqualToPerson:(Person *)person { \\n      if (!person) {  \\n      \\t\\treturn NO;\\n  \\t   } \\n  \\t   BOOL namesMatch = (!self.name && !person.name) || [self.name isEqualToString:person.name]; \\n  \\t   BOOL birthdaysMatch = (!self.birthday && !person.birthday) || [self.birthday isEqualToDate:person.birthday]; \\n  \\t   return haveEqualNames && haveEqualBirthdays; \\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"多用队列，少用同步锁来避免资源抢夺\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多用队列，少用同步锁来避免资源抢夺\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 多用队列，少用同步锁来避免资源抢夺\")]),e._v(\" \"),t(\"p\",[e._v(\"多个线程执行同一份代码时，很可能会造成数据不同步。建议使用GCD来为代码加锁的方式解决这个问题。\")]),e._v(\" \"),t(\"p\",[e._v(\"方案一：使用串行同步队列来将读写操作都安排到同一个队列里：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('_syncQueue = dispatch_queue_create(\"com.effectiveobjectivec.syncQueue\", NULL);\\n//读取字符串\\n- (NSString*)someString {\\n         __block NSString *localSomeString;\\n         dispatch_sync(_syncQueue, ^{\\n            localSomeString = _someString;\\n        });\\n         return localSomeString;\\n}\\n//设置字符串\\n- (void)setSomeString:(NSString*)someString {\\n     dispatch_sync(_syncQueue, ^{\\n        _someString = someString;\\n    });\\n}\\n')])])]),t(\"p\",[e._v(\"这样一来，读写操作都在串行队列进行，就不容易出错。\")]),e._v(\" \"),t(\"p\",[e._v(\"但是，还有一种方法可以让性能更高：\")]),e._v(\" \"),t(\"p\",[e._v(\"方案二：将写操作放入栅栏快中，让他们单独执行；将读取操作并发执行。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\\n//读取字符串\\n- (NSString*)someString {\\n     __block NSString *localSomeString;\\n     dispatch_sync(_syncQueue, ^{\\n        localSomeString = _someString;\\n    });\\n     return localSomeString;\\n}\\n//设置字符串\\n- (void)setSomeString:(NSString*)someString {\\n     dispatch_barrier_async(_syncQueue, ^{\\n        _someString = someString;\\n    });\\n}\\n\")])])]),t(\"p\",[e._v(\"显然，数据的正确性主要取决于写入操作，那么只要保证写入时，线程是安全的，那么即便读取操作是并发的，也可以保证数据是同步的。\\n这里的dispatch_barrier_async方法使得操作放在了同步队列里“有序进行”，保证了写入操作的任务是在串行队列里。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"nsarray-nsmutablearray\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nsarray-nsmutablearray\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" NSArray & NSMutableArray\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[e._v(\"addObject之前要非空判断。\")]),e._v(\" \"),t(\"li\",[e._v(\"取下标的时候要判断是否越界。\")]),e._v(\" \"),t(\"li\",[e._v(\"取第一个元素或最后一个元素的时候使用firtstObject和lastObject\")])]),e._v(\" \"),t(\"h3\",{attrs:{id:\"nscache\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nscache\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" NSCache\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-构建缓存时选用nscache-而非nsdictionary\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-构建缓存时选用nscache-而非nsdictionary\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 构建缓存时选用NSCache 而非NSDictionary\")]),e._v(\" \"),t(\"p\",[e._v(\"如果我们缓存使用得当，那么应用程序的响应速度就会提高。只有那种“重新计算起来很费事的数据，才值得放入缓存”，比如那些需要从网络获取或从磁盘读取的数据。\")]),e._v(\" \"),t(\"p\",[e._v(\"在构建缓存的时候很多人习惯用NSDictionary或者NSMutableDictionary，但是作者建议大家使用NSCache，它作为管理缓存的类，有很多特点要优于字典，因为它本来就是为了管理缓存而设计的。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_2-nscache优于nsdictionary的几点：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-nscache优于nsdictionary的几点：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. NSCache优于NSDictionary的几点：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"当系统资源将要耗尽时，NSCache具备自动删减缓冲的功能。并且还会先删减“最久未使用”的对象。\")]),e._v(\" \"),t(\"li\",[e._v(\"NSCache不拷贝键，而是保留键。因为并不是所有的键都遵从拷贝协议（字典的键是必须要支持拷贝协议的，有局限性）。\")]),e._v(\" \"),t(\"li\",[e._v(\"NSCache是线程安全的：不编写加锁代码的前提下，多个线程可以同时访问NSCache。\")])]),e._v(\" \"),t(\"h3\",{attrs:{id:\"nsnotification\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nsnotification\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" NSNotification\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_1-通知的名称\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-通知的名称\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. 通知的名称\")]),e._v(\" \"),t(\"p\",[e._v(\"建议将通知的名字作为常量，保存在一个专门的类中：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('// Const.h\\nextern NSString * const ZOCFooDidBecomeBarNotification\\n// Const.m\\nNSString * const ZOCFooDidBecomeBarNotification = @\"ZOCFooDidBecomeBarNotification\";\\n')])])]),t(\"h4\",{attrs:{id:\"_2-通知的移除\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-通知的移除\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 通知的移除\")]),e._v(\" \"),t(\"p\",[e._v(\"通知必须要在对象销毁之前移除掉。\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"其他\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#其他\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 其他\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_1-xcode工程文件的物理路径要和逻辑路径保持一致。\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-xcode工程文件的物理路径要和逻辑路径保持一致。\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. Xcode工程文件的物理路径要和逻辑路径保持一致。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_2-图片文件都放到-assets-xcassets-中\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-图片文件都放到-assets-xcassets-中\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. 图片文件都放到 Assets.xcassets 中\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_3-合理使用-pch-文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-合理使用-pch-文件\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. 合理使用 pch 文件\")]),e._v(\" \"),t(\"p\",[e._v(\"首先需要了解的是 pch 本来的目的是在里面定义需要预编译的头文件。\")]),e._v(\" \"),t(\"p\",[e._v(\"而预编译头文件，顾名思义，是将头文件事先编译成一种二进制的中间格式。在整个编译过程中，只编译一次，并且会有缓存，如预编译头所涉及的部分不发生改变的话，在随后的编译过程中此部分不会重新进行编译，从而大大提高编译速度。\")]),e._v(\" \"),t(\"p\",[e._v(\"与此同时加入pch中的头文件，在项目其他地方要使用时，就不需要再import了。这可以算是一种便利，但它也是副作用的源头。\")]),e._v(\" \"),t(\"p\",[t(\"font\",{attrs:{color:\"red\"}},[e._v(\"切记：\"),t(\"b\",[e._v(\"pch的目的是提高编译速度，而不是让你少打几行import代码。\")])])],1),e._v(\" \"),t(\"p\",[e._v(\"由于程序员的滥用苹果在 XCode6 之后就不再生成 pch 文件了。。\")]),e._v(\" \"),t(\"p\",[e._v(\"当然在合理使用的情况下还是可以使用的，但加入到 pch 中必须满足以下条件\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"基本大多数文件都会用到。\")]),e._v(\" \"),t(\"li\",[e._v(\"不应该经常改动，比如宏定义、常量定义等不应该放在pch里，pch应该只有\"),t(\"code\",[e._v(\"#import\")]),e._v(\"或者\"),t(\"code\",[e._v(\"#include\")]),e._v(\"。\")])]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_4-忽略没有使用变量的编译警告\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-忽略没有使用变量的编译警告\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. 忽略没有使用变量的编译警告\")]),e._v(\" \"),t(\"p\",[e._v(\"对于某些暂时不用，以后可能用到的临时变量，为了避免警告，我们可以使用如下方法将这个警告消除：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (NSInteger)giveMeFive { \\n NSString *foo; \\n #pragma unused (foo) \\n return 5; \\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"_5-手动标明警告和错误\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-手动标明警告和错误\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5. 手动标明警告和错误\")]),e._v(\" \"),t(\"p\",[e._v(\"手动明确一个错误：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (NSInteger)divide:(NSInteger)dividend by:(NSInteger)divisor { \\n #error Whoa, buddy, you need to check for zero here! \\n return (dividend / divisor); \\n}\\n\")])])]),t(\"p\",[e._v(\"手动明确一个警告：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"- (float)divide:(float)dividend by:(float)divisor { \\n #warning Dude, don't compare floating point numbers like this! \\n if (divisor != 0.0) { \\n  return (dividend / divisor); \\n } else {  return NAN; \\n } \\n}\\n\")])])])])},[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}