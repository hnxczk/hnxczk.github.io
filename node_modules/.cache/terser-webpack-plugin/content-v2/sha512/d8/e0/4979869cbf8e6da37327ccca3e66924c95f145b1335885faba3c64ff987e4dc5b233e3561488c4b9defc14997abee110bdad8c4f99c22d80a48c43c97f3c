{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{545:function(n,e,t){\"use strict\";t.r(e);var a=t(0),i=Object(a.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"h2\",{attrs:{id:\"两个递增排序的整数序列-a-b，长度同为n，求前k个最小的-a-i-b-j\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#两个递增排序的整数序列-a-b，长度同为n，求前k个最小的-a-i-b-j\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 两个递增排序的整数序列 A, B，长度同为N，求前K个最小的 a[i] + b[j]\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"求-1-2-n-不能用乘除法、for、while-if、else、switch、case-等关键字以及条件判断语句-a-b-c\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#求-1-2-n-不能用乘除法、for、while-if、else、switch、case-等关键字以及条件判断语句-a-b-c\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 求 1+2+...+n, 不能用乘除法、for、while if、else、switch、case 等关键字以及条件判断语句 (A?B:C)\")]),n._v(\" \"),t(\"p\",[n._v(\"参考： \"),t(\"a\",{attrs:{href:\"https://blog.csdn.net/wanghuiqi2008/article/details/26622471\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"解法参考\"),t(\"OutboundLink\")],1)]),n._v(\" \"),t(\"p\",[n._v(\"利用&&的短路特性\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('#include <stdio.h>  \\n#include <stdlib.h>  \\n#include <string.h>  \\n  \\nint add_fun(int n, int &sum)  \\n{  \\n    n && add_fun(n-1, sum);  \\n    return (sum+=n);  \\n}  \\n  \\nint main()  \\n{  \\n    int sum=0;  \\n    int n=100;  \\n  \\n    printf(\"1+2+3+...+n=%d\\\\n\",add_fun(n, sum));  \\n  \\n    return 0;  \\n}  \\n')])])]),t(\"h2\",{attrs:{id:\"单链表反转\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单链表反转\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 单链表反转\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('#include<iostream>  \\nusing namespace std;  \\n  \\n//定义一个链表节点  \\nstruct ListNode  \\n{  \\n    int value;  \\n    ListNode *next;  \\n};  \\n  \\n//插入一个新节点到链表中(放在链表头部)  \\nvoid CreateList(ListNode * & head, int data)  \\n{  \\n    //创建新节点  \\n    ListNode * p = (ListNode*)malloc(sizeof(ListNode));  \\n    p->value = data;  \\n    p->next = NULL;  \\n  \\n    if (head == NULL)  \\n    {  \\n        head = p;  \\n        return;  \\n    }  \\n    p->next = head;  \\n    head = p;  \\n}  \\n  \\nvoid  printList(ListNode* head)  \\n{  \\n    ListNode * p = head;  \\n    while (p != NULL)  \\n    {  \\n        cout << p->value<< \" \";  \\n        p = p->next;  \\n    }  \\n    cout << endl;  \\n}  \\n  \\n  \\n// 递归方式：实现单链表反转  \\n// 先反转后面的链表，从最后面的两个结点开始反转，依次向前，将后一个链表结点指向前一个结点，注意每次反转后要将原链表中前一个结点的指针域置空，表示将原链表中前一个结点指向后一个结点的指向关系断开。\\n\\nListNode * ReverseList(ListNode * head)  \\n{  \\n    //递归终止条件：找到链表最后一个结点  \\n    if (head == NULL || head->next == NULL)  \\n        return head;  \\n    else  \\n    {  \\n        ListNode * newhead = ReverseList(head->next);//先反转后面的链表，从最后面的两个结点开始反转，依次向前  \\n        head->next->next = head;//将后一个链表结点指向前一个结点  \\n        head->next = NULL;//将原链表中前一个结点指向后一个结点的指向关系断开  \\n        return newhead;  \\n    }  \\n}  \\n  \\n// 非递归方式：实现单链表反转  \\n// 利用两个结点指针和一个中间结点指针temp(用来记录当前结点的下一个节点的位置)，分别指向当前结点和前一个结点，每次循环让当前结点的指针域指向前一个结点即可，翻转结束后，记得将最后一个节点的链域置为空。\\nListNode* reverseList2(ListNode* head) {  \\n    if (head == NULL || head->next == NULL)   \\n        return head;  \\n    ListNode* prev = head;  \\n    ListNode* cur = head->next;  \\n    ListNode* temp = head->next->next;  \\n  \\n    while (cur){  \\n        temp = cur->next; //temp作为中间节点，记录当前结点的下一个节点的位置  \\n        cur->next = prev;  //当前结点指向前一个节点  \\n        prev = cur;     //指针后移  \\n        cur = temp;  //指针后移，处理下一个节点  \\n    }  \\n  \\n    head->next = NULL; //while结束后，将翻转后的最后一个节点（即翻转前的第一个结点head）的链域置为NULL  \\n    return prev;  \\n}  \\n  \\n  \\nint main()  \\n{  \\n    ListNode * head = NULL;  \\n    for (int i = 0; i<9; i++)  \\n        CreateList(head, i);  \\n    printList(head);  \\n    head = ReverseList(head);  \\n    printList(head);  \\n    system(\"pause\");  \\n    return 0;  \\n}  \\n')])])])])},[],!1,null,null,null);e.default=i.exports}}]);","extractedComments":[]}