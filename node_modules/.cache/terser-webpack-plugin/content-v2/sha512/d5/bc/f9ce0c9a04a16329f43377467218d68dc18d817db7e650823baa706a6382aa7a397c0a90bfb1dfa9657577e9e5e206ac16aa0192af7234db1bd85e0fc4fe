{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{515:function(a,_,t){\"use strict\";t.r(_);var v=t(0),r=Object(v.a)({},function(){var a=this,_=a.$createElement,t=a._self._c||_;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"复杂度分析\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复杂度分析\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 复杂度分析\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_01-why\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_01-why\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 01 Why\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"通关大厂面试\")]),a._v(\" \"),t(\"li\",[a._v(\"掌握数据结构和算法，不管对于阅读框架源码，还是理解其背后的设计思想都是非常有用的\")]),a._v(\" \"),t(\"li\",[a._v(\"有追求，不想被行业淘汰，就不能只会写凑合的代码，性能好坏是好代码其中一个要求\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_02-how\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_02-how\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 02 How\")]),a._v(\" \"),t(\"p\",[a._v(\"抓住重点\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"定义\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 定义\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"广义\\n数据结构就是指一组数据的储存结构，算法就是操作数据的一组方法\")]),a._v(\" \"),t(\"li\",[a._v(\"狭义\\n某些著名的数据结构和算法，比如队列、堆、栈、二分查找等等。利用这些前人的智慧可以高效地帮助我们解决实际开发问题\")])]),a._v(\" \"),t(\"p\",[a._v(\"数据结构是为算法服务的，算法要作用于特定的数据结构上。二者无法孤立。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"学习重点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#学习重点\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 学习重点\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"掌握复杂度分析\")]),a._v(\" \"),t(\"li\",[a._v(\"十个数据结构\\n数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树\")]),a._v(\" \"),t(\"li\",[a._v(\"十个算法\\n递归、排序、二分查找、搜索、哈希、贪心、分治、回溯、动态规划、字符串匹配\")])]),a._v(\" \"),t(\"p\",[a._v(\"要学习算法和数据结构的来历、自身特点、适应解决的问题以及实际的应用场景\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"学习技巧\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#学习技巧\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 学习技巧\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"边学边练，适度刷题\")]),a._v(\" \"),t(\"li\",[a._v(\"多问，多思考，多互动\")]),a._v(\" \"),t(\"li\",[a._v(\"打怪升级学习法\")]),a._v(\" \"),t(\"li\",[a._v(\"知识需要沉淀，不要企图一下子掌握所有\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_03-复杂度分析（上）\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_03-复杂度分析（上）\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 03 复杂度分析（上）\")]),a._v(\" \"),t(\"p\",[a._v(\"复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"事后统计法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事后统计法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 事后统计法\")]),a._v(\" \"),t(\"p\",[a._v(\"跑一遍代码，通过统计、监控来得到算法执行的时间和占用的内存大小。\")]),a._v(\" \"),t(\"p\",[a._v(\"缺点\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"测试结果非常依赖测试环境\")]),a._v(\" \"),t(\"li\",[a._v(\"搜数据规模的影响很大\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"大-o-复杂度表示法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#大-o-复杂度表示法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 大 O 复杂度表示法\")]),a._v(\" \"),t(\"p\",[a._v(\"所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比\")]),a._v(\" \"),t(\"p\",[a._v(\"T(n) = O(f(n))\")]),a._v(\" \"),t(\"p\",[a._v(\"T(n) 表示代码执行时间\\nn 表示数据规模\\nf(n) 表示所有代码的执行次数总和\\nO 表示代码的执行时间 T(n) 与 f(n) 成正比\")]),a._v(\" \"),t(\"p\",[a._v(\"大 O 时间复杂度实际上并不表示代码的真正执行时间，而是表示\"),t(\"strong\",[a._v(\"代码执行时间随数据规模增长的变化趋势\")]),a._v(\"，也被称为\"),t(\"strong\",[a._v(\"渐进时间复杂度\")]),a._v(\"，简称\"),t(\"strong\",[a._v(\"时间复杂度\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"时间复杂度分析\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#时间复杂度分析\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 时间复杂度分析\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_1-只关注循环执行次数最多的代码\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-只关注循环执行次数最多的代码\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1. 只关注循环执行次数最多的代码\")]),a._v(\" \"),t(\"p\",[a._v(\"由于大 O 浮渣度分析只是表示一种变化趋势，会忽略掉公式里的常量、低阶、系数，只记录最大阶的量级。因此分析时间复杂度的时候，只关注循环执行次数最多的代码就可以了。\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_2-加法法则：总的复杂度等于量级最大的那段代码的复杂度\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-加法法则：总的复杂度等于量级最大的那段代码的复杂度\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 2. 加法法则：总的复杂度等于量级最大的那段代码的复杂度\")]),a._v(\" \"),t(\"p\",[a._v(\"如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\")]),a._v(\" \"),t(\"p\",[a._v(\"T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)).\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"常见时间复杂度分析实例\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见时间复杂度分析实例\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 常见时间复杂度分析实例\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"多项式量级\\n\"),t(\"ul\",[t(\"li\",[a._v(\"常数阶 O(1)\")]),a._v(\" \"),t(\"li\",[a._v(\"对数阶 O(logn)\")]),a._v(\" \"),t(\"li\",[a._v(\"线性阶 O(n)\")]),a._v(\" \"),t(\"li\",[a._v(\"线性对数阶 O(nlogn)\")]),a._v(\" \"),t(\"li\",[a._v(\"平方阶 O(n^2)、立方阶 O(n^3)...\")])])]),a._v(\" \"),t(\"li\",[a._v(\"非多项式量级\\n\"),t(\"ul\",[t(\"li\",[a._v(\"指数阶 O(2^n)\")]),a._v(\" \"),t(\"li\",[a._v(\"阶乘阶 O(n!)\")])])])]),a._v(\" \"),t(\"p\",[a._v(\"当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"多项式量级\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多项式量级\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 多项式量级\")]),a._v(\" \"),t(\"h5\",{attrs:{id:\"_1-o-1\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-o-1\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1. O(1)\")]),a._v(\" \"),t(\"p\",[a._v(\"一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万的代码也是 O(1)\")]),a._v(\" \"),t(\"h5\",{attrs:{id:\"_2-o-log-n-、o-n-log-n\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-o-log-n-、o-n-log-n\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 2.  O(log n)、O(n log n)\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\" i=1;\\n while (i <= n)  {\\n   i = i * 2;\\n }\\n\")])])]),t(\"p\",[a._v(\"设 x 为执行次数， 则 2 的 x 次方等于 n, 因此 x = log2n。\\n采用大 O 变价复杂度的时候，对于对数阶的时间复杂度常忽略对数的底，统一表示为 O(logn)\")]),a._v(\" \"),t(\"h5\",{attrs:{id:\"_3-o-m-n-、o-m-n\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-o-m-n-、o-m-n\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 3. O(m+n)、O(m*n)\")]),a._v(\" \"),t(\"p\",[a._v(\"代码的复杂度由两个数据的规模来决定.\")]),a._v(\" \"),t(\"p\",[a._v(\"加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"空间复杂度分析\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#空间复杂度分析\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 空间复杂度分析\")]),a._v(\" \"),t(\"p\",[a._v(\"空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_03-复杂度分析（下）\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_03-复杂度分析（下）\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 03 复杂度分析（下）\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"复杂度分析的-4-个概念\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复杂度分析的-4-个概念\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 复杂度分析的 4 个概念\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"最坏情况时间复杂度：代码在最理想情况下执行的时间复杂度。\")]),a._v(\" \"),t(\"li\",[a._v(\"最好情况时间复杂度：代码在最坏情况下执行的时间复杂度。\")]),a._v(\" \"),t(\"li\",[a._v(\"平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。\")]),a._v(\" \"),t(\"li\",[a._v(\"均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"平均情况时间复杂度\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#平均情况时间复杂度\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 平均情况时间复杂度\")]),a._v(\" \"),t(\"p\",[a._v(\"查找变量 x 是否在 容量为 n 的数组中\")]),a._v(\" \"),t(\"p\",[a._v(\"我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。\")]),a._v(\" \"),t(\"p\",[a._v(\"这就是概率论里的加权平均数，也称为期望值，所以平均时间复杂度全称是加权平均时间复杂度或者期望时间复杂度\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"均摊时间复杂度\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#均摊时间复杂度\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 均摊时间复杂度\")]),a._v(\" \"),t(\"p\",[a._v(\"对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。\")]),a._v(\" \"),t(\"p\",[a._v(\"这种复杂度分析的方法称为\"),t(\"strong\",[a._v(\"摊还分析\")]),a._v(\"，通过摊还分析得到的时间复杂度我们起了一个名字，叫均摊时间复杂度。\")]),a._v(\" \"),t(\"p\",[a._v(\"在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。\")]),a._v(\" \"),t(\"p\",[a._v(\"均摊时间复杂度就是一种特殊的平均时间复杂度\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"如何分析平均、均摊时间复杂度？\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何分析平均、均摊时间复杂度？\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 如何分析平均、均摊时间复杂度？\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"平均时间复杂度\\n代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。\")]),a._v(\" \"),t(\"li\",[a._v(\"均摊时间复杂度\\n两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_04-数据结构与算法学习书单\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_04-数据结构与算法学习书单\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 04 数据结构与算法学习书单\")]),a._v(\" \"),t(\"p\",[a._v(\"入门：大话数据结构、算法图解\")]),a._v(\" \"),t(\"p\",[a._v(\"面试：剑指offer\")]),a._v(\" \"),t(\"p\",[a._v(\"经典：算法\")])])},[],!1,null,null,null);_.default=r.exports}}]);","extractedComments":[]}