{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{355:function(t,e,a){t.exports=a.p+\"assets/img/responder_1.5ec38900.png\"},420:function(t,e,a){\"use strict\";a.r(e);var r=a(0),i=Object(r.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"事件响应\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件响应\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 事件响应\")]),t._v(\" \"),r(\"h2\",{attrs:{id:\"uiresponder\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#uiresponder\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" UIResponder\")]),t._v(\" \"),r(\"p\",[t._v(\"当 App 与用户进行交互的时候需要依赖于各种事件，比如用户点击一个按钮，这就会产生一个点击事件。而在 UIKit 中这些事件定义在 UIResponder 类中。\\n我们常见的 UIApplication、UIView、UIViewController 这几个类都是直接继承自 UIResponder。了解这一点对于理解响应链有很大的帮助。\")]),t._v(\" \"),r(\"h2\",{attrs:{id:\"响应链\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#响应链\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 响应链\")]),t._v(\" \"),r(\"p\",[t._v(\"大多数事件的分发都是依赖响应链的。响应链是由一系列链接在一起的响应者组成的。一般情况下，一条响应链开始于第一响应者，结束于 application 对象。如果一个响应者不能处理事件，则会将事件沿着响应链传到下一响应者。\")]),t._v(\" \"),r(\"p\",[t._v(\"那这里就会有三个问题：\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"响应链是何时构建的\")]),t._v(\" \"),r(\"li\",[t._v(\"系统是如何确定第一响应者的\")]),t._v(\" \"),r(\"li\",[t._v(\"确定第一响应者后，系统又是按照什么样的顺序来传递事件的\")])]),t._v(\" \"),r(\"h3\",{attrs:{id:\"构建响应链\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#构建响应链\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 构建响应链\")]),t._v(\" \"),r(\"p\",[t._v(\"在一个 App 中，所有视图是按一定的结构组织起来的，即树状层次结构。除了根视图外，每个视图都有一个父视图；而每个视图都可以有0个或多个子视图。而在这个树状结构构建的同时，也构建了一条条的事件响应链。\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"确定第一响应者\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#确定第一响应者\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 确定第一响应者\")]),t._v(\" \"),r(\"p\",[t._v(\"当用户触发某一事件(触摸事件或运动事件)后，UIKit 会创建一个事件对象( UIEvent )，该对象包含一些处理事件所需要的信息。然后事件对象被放到一个事件队列中。这些事件按照先进先出的顺序来处理。当处理事件时，程序的 UIApplication 对象会从队列头部取出一个事件对象，将其分发出去。通常首先是将事件分发给程序的主 window 对象，对于触摸事件来讲，window 对象会首先尝试将事件分发给触摸事件发生的那个视图上。这一视图通常被称为\"),r(\"code\",[t._v(\"hit-test\")]),t._v(\"视图，而查找这一视图的过程就叫做\"),r(\"code\",[t._v(\"hit-testing\")]),t._v(\"。\")]),t._v(\" \"),r(\"p\",[t._v(\"系统使用 \"),r(\"code\",[t._v(\"hit-testing\")]),t._v(\" 来找到触摸下的视图，它检测一个触摸事件是否发生在相应视图对象的边界之内(即视图的 frame 属性，这也是为什么子视图如果在父视图的 frame 之外时，是无法响应事件的)。如果在，则会递归检测其所有的子视图。包含触摸点的视图层次架构中最底层的视图就是 \"),r(\"code\",[t._v(\"hit-test\")]),t._v(\" 视图。在检测出 \"),r(\"code\",[t._v(\"hit-test\")]),t._v(\" 视图后，系统就将事件发送给这个视图来进行处理。\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"事件传递\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件传递\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 事件传递\")]),t._v(\" \"),r(\"p\",[t._v(\"最有机会处理事件的对象是 \"),r(\"code\",[t._v(\"hit-test\")]),t._v(\" 视图或第一响应者。如果这两者都不能处理事件，UIKit 就会将事件传递到响应链中的下一个响应者。每一个响应者确定其是否要处理事件或者是通过 nextResponder 方法将其传递给下一个响应者。这一过程一直持续到找到能处理事件的响应者对象或者最终没有找到响应者。\")]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:a(355),alt:\"\"}})]),t._v(\" \"),r(\"blockquote\",[r(\"p\",[t._v(\"从上面可以看到，视图、视图控制器、窗口对象和app对象都能处理事件。另外需要注意的是，手势也会影响到事件的传递。\")])]),t._v(\" \"),r(\"ol\",[r(\"li\",[t._v(\"初始视图(initial view)尝试处理事件。如果它不能处理事件，则将事件传递给其父视图。\")]),t._v(\" \"),r(\"li\",[t._v(\"初始视图的父视图(superview)尝试处理事件。如果这个视图还是不能处理事件，则将事件传递给视图所在的视图控制器。\")]),t._v(\" \"),r(\"li\",[t._v(\"视图控制器会尝试处理事件。如果这个视图控制器不能处理事件，则将事件传递给窗口(window)对象。\")]),t._v(\" \"),r(\"li\",[t._v(\"窗口(window)对象尝试处理事件。如果不能处理，则将事件传递给单例 application 对象。\")]),t._v(\" \"),r(\"li\",[t._v(\"如果 application 对象不能处理事件，则丢弃这个事件。\")])]),t._v(\" \"),r(\"h2\",{attrs:{id:\"参考\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 参考\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[r(\"a\",{attrs:{href:\"http://southpeak.github.io/2015/03/07/cocoa-uikit-uiresponder/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"UIKit: UIResponder\"),r(\"OutboundLink\")],1)])])])},[],!1,null,null,null);e.default=i.exports}}]);","extractedComments":[]}