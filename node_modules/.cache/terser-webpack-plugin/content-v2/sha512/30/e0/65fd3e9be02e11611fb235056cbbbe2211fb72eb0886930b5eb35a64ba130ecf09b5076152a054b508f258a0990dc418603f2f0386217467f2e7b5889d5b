{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{238:function(a,e,t){a.exports=t.p+\"assets/img/gcd_1.c6bffa99.jpg\"},239:function(a,e,t){a.exports=t.p+\"assets/img/gcd_2.ff307100.png\"},447:function(a,e,t){\"use strict\";t.r(e);var r=t(0),s=Object(r.a)({},function(){var a=this,e=a.$createElement,r=a._self._c||e;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"gcd\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gcd\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" GCD\")]),a._v(\" \"),r(\"h2\",{attrs:{id:\"一些概念\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一些概念\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 一些概念\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"进程\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#进程\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 进程\")]),a._v(\" \"),r(\"p\",[a._v(\"指的是一个正在运行中的可执行文件。每一个进程都拥有独立的虚拟内存空间和系统资源，包括端口权限等，且至少包含一个主线程和任意数量的辅助线程。另外，当一个进程的主线程退出时，这个进程就结束了。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"线程\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 线程\")]),a._v(\" \"),r(\"blockquote\",[r(\"p\",[a._v(\"一个CPU执行的CPU命令列为一条无分叉路径即为线程\")])]),a._v(\" \"),r(\"p\",[a._v(\"我们都知道我们写的OC/Swift源码最后会被编译器转换成相应的CPU命令列，然后程序启动后操作系统会将包含在程序中的CPU命令列配置到内存中。然后会从应用程序制定的地址开始一个一个的执行命令。虽然在遇到诸如if语句、for语句等控制语句或者函数调用的情况下，执行命令列会进行位置迁移。但是由于一个CPU一次只能处理一个指令，因此依然可以把CPU命令列看成一条无分叉的路径，其执行不会出现分叉。\\n当这种无分叉的路径存在多条时就是“多线程”。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"多线程\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多线程\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 多线程\")]),a._v(\" \"),r(\"p\",[a._v(\"虽然CPU相关的技术不断进步，但是基本上一个CPU核一次能执行的命令始终为1。这时候要在多条路径中执行CPU命令列就需要进行“上下文切换”。\")]),a._v(\" \"),r(\"blockquote\",[r(\"p\",[a._v(\"将执行中的路径的状态，如CPU寄存器等信息保存到对应路径专用的内存块中，然后从将要切换到的目标路径对应的内存中复原CPU寄存器等信息，继续执行切换路径的CPU命令列。这就称为“上下文切换”。\")])]),a._v(\" \"),r(\"p\",[a._v(\"来个比喻来说，比如CPU是个学生，他需要做英语和数学两种作业。但是我们让CPU写一会儿英语作业后写一会儿数学作业，然后再写一会儿英语作业。两种作业快速切换就给人一种CPU在同时在写英语和数学作业的感觉。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"多线程的坏处\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多线程的坏处\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 多线程的坏处\")]),a._v(\" \"),r(\"p\",[a._v(\"一般我们都觉得多线程多好啊，几个线程一起执行任务，这样肯定会提高速度。但是从上面多线程的介绍来看并不是这样。（你要是让小明去一边写英语一边写数学，估计早就被打死了。。）当在不同的线程中来回切换的时候会不停地备份、替换寄存器等信息，这明显会耗费性能。那多线程的用处是什么呢？这就要涉及几个新的概念。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"并发、并行、串行\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发、并行、串行\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 并发、并行、串行\")]),a._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:t(238),alt:\"图片来自Erlang 之父 Joe Armstrong\"}})]),a._v(\" \"),r(\"p\",[a._v(\"Erlang 之父 Joe Armstrong 用一张图解释了并发与并行的区别。并发是两队交替使用一台咖啡机，并行则是两个队列同时使用两台咖啡机。串行则是一个队列使用一台咖啡机。（更详细的说明可以看看\"),r(\"a\",{attrs:{href:\"https://www.zhihu.com/question/33515481\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"知乎这些回答\"),r(\"OutboundLink\")],1),a._v(\"）\\n多线程就是采用了并行的技术来同时处理不同的指令。而在我们的程序中通过主线程来绘制界面，响应用户交互事件。如果在这个线程上进行长时间的处理，就会阻塞主线程的执行，妨碍主线程中Runloop的住循环，这样就不能及时更新界面，响应用户的交互，这就给用户卡顿的感觉。而使用多线程就能解决这个问题，给用户“快”的感觉。所以多线程所谓能提高速度指的就是这个意思。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"同步、异步\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同步、异步\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 同步、异步\")]),a._v(\" \"),r(\"p\",[a._v(\"同步就是我们平常写的那些代码。它会一行接一行的执行，每一行都可以看成是一个任务，一个任务没执行完就不会执行下一个任务。异步就是允许执行一行的时候函数直接返回，真正要执行的任务稍后完成。\\n对于同步执行的任务来说系统__倾向于__在同一个线程中执行。这是因为这个时候就算开了其他线程系统也要等他们在各自线程中全执行完成，这样以来又增加了线程切换时的性能，得不偿失。\\n对于异步执行的任务来说系统__倾向于__在多个线程中执行，这样就可以更好的利用CPU性能，缩短完成任务的时间，提高效率。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"队列、线程\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#队列、线程\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 队列、线程\")]),a._v(\" \"),r(\"p\",[a._v(\"这两个概念经常被混淆，其实这两个是不同层级的概念。队列是为了方便使用和理解的抽象结构，线程则是系统级进行运算调度的单位。系统利用队列来进行任务调度，它会根据调度任务的需要和系统的负载等情况动态的创建和销毁线程。并行队列可能对应多个线程。串行队列则每次对应一个线程，这个线程可能不变，可能会被更换。\")]),a._v(\" \"),r(\"h2\",{attrs:{id:\"gcd-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gcd-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" GCD\")]),a._v(\" \"),r(\"blockquote\",[r(\"p\",[a._v(\"Grand Central Dispatch是异步执行任务的技术之一。\"),r(\"strong\",[a._v(\"开发者要做的只是定义想要执行的任务并追加到适当的Queue中\")]),a._v(\"，GCD就能生成必要的线程并计划计划任务。\")])]),a._v(\" \"),r(\"p\",[a._v(\"可以看出我们需要注意的两点就是Queue和添加任务到Queue，在GCD中对应的就是\"),r(\"code\",[a._v(\"dispatch_queue\")]),a._v(\"（队列）和\"),r(\"code\",[a._v(\"dispatch_async\")]),a._v(\"、\"),r(\"code\",[a._v(\"dispatch_sync\")]),a._v(\"（ 执行方式）。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"队列\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#队列\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 队列\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[r(\"strong\",[a._v(\"串行队列\")]),a._v(\"（Serial Dispatch Queue）遵循先进先出规则，每一个任务都会等待它上个任务处理完成后执行，因此每次只执行一个任务。主队列是一种特殊的串行队列。是在主线程中执行的队列。\")])]),a._v(\" \"),r(\"li\",[r(\"p\",[r(\"strong\",[a._v(\"并行队列\")]),a._v(\"（Concurrent Dispatch Queue）依然遵循先进先出，不过每个任务不会等其他任务处理结束后再执行，而是在其他任务开始执行后就开始执行，这样就实现的多个任务并行。\")])])]),a._v(\" \"),r(\"p\",[a._v(\"举个例子：现在有三个任务blk1，blk2，blk3。\")]),a._v(\" \"),r(\"p\",[a._v(\"在串行队列里会先执行blk1，等blk1执行完之后执行blk2，然后等blk2结束后再执行blk3。\")]),a._v(\" \"),r(\"p\",[a._v(\"在并行队列里会先执行blk1，不用等blk1的处理结束就开始执行blk2，这时候也不用等待blk1，blk2的执行结束直接执行blk3。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('// 串行队列的创建\\ndispatch_queue_t serial = dispatch_queue_create(\"com.zhouke.serial\", NULL);\\n// 获取主队列（这是个串行队列）\\ndispatch_queue_t mainSerial = dispatch_get_main_queue();\\n\\n// 创建并行队列\\ndispatch_queue_t concurrentCreated = dispatch_queue_create(\"com.zhouke.concurrent\", DISPATCH_QUEUE_CONCURRENT);\\n// 获取默认优先级的并行队列\\ndispatch_queue_t concurrentGet = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\\n\\n')])])]),r(\"h3\",{attrs:{id:\"执行方式\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行方式\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 执行方式\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[r(\"strong\",[a._v(\"同步执行\")]),a._v(\"（\"),r(\"code\",[a._v(\"dispatch_sync\")]),a._v(\"）这个函数就是把指定的block同步添加到指定的队列中，在这个block执行结束之前，函数会一直等待。（了解这个死锁就很容易理解了）\")]),a._v(\" \"),r(\"li\",[r(\"strong\",[a._v(\"异步执行\")]),a._v(\"（\"),r(\"code\",[a._v(\"dispatch_sync\")]),a._v(\"）这个函数会将指定的block非同步的添加到指定队列中，函数不做等待。\")])]),a._v(\" \"),r(\"p\",[a._v(\"一般来说同步方法会在当前线程执行，异步方法会开启新的线程。但是对于主队列来说就有点特殊了。在主队列执行同步方法会产生死锁，执行异步方法不会开启新的线程，依然在主线程执行。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"线程的开辟\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的开辟\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 线程的开辟\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"(串行/并行)队列决定任务是否在当前线程(注意不是队列)执行。\")]),a._v(\" \"),r(\"li\",[a._v(\"(同步/异步)任务决定任务立即执行(阻塞线程)还是添加到队列末尾(不阻塞线程)。\")])]),a._v(\" \"),r(\"p\",[a._v(\"由上可知会开辟新线程的两种情况：\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"并行队列+异步任务 = 多条新线程\")]),a._v(\" \"),r(\"li\",[a._v(\"串行队列+异步任务 = 一条新线程\")])]),a._v(\" \"),r(\"p\",[a._v(\"其余的情况下都不会开辟线程。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"死锁\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#死锁\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 死锁\")]),a._v(\" \"),r(\"blockquote\",[r(\"p\",[a._v(\"如果向\"),r(\"strong\",[a._v(\"当前\")]),a._v(\"串行队列\"),r(\"strong\",[a._v(\"同步\")]),a._v(\"派发任务就会产生死锁\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('- (void)viewDidLoad {\\n    [super viewDidLoad];\\n\\n    NSLog(@\"1.%@\", [NSThread currentThread]);\\n    dispatch_queue_t queue = dispatch_get_main_queue();\\n    dispatch_sync(queue, ^{\\n        NSLog(@\"2.%@\", [NSThread currentThread]);\\n    });\\n}\\n')])])]),r(\"p\",[a._v(\"这段代码就会会造成死锁。我们可以把\"),r(\"code\",[a._v(\"dispatch_sync\")]),a._v(\"这个函数当做一个任务A，block里包装的是另一个任务B。然后我们可以看到A处于主队列中，这时同步添加任务B到主队列中。任务A会等待B任务完成，但是由于当前主队列是串行队列，这个新增的B任务要等到A任务执行完才能执行，这样就造成了两个任务互相等待，导致死锁。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('- (void)viewDidLoad {\\n    [super viewDidLoad];\\n\\n    NSLog(@\"1.%@\", [NSThread currentThread]);\\n    dispatch_queue_t queue = dispatch_queue_create(\"com.xxx.xxx\", NULL);\\n    dispatch_sync(queue, ^{\\n        NSLog(@\"2.%@\", [NSThread currentThread]);\\n    });\\n}\\n')])])]),r(\"p\",[a._v(\"上面这段代码就不会照成死锁，这是因为\"),r(\"code\",[a._v(\"dispatch_sync\")]),a._v(\"这个函数处于主队列中,但是block包装的任务处于queue这个串行队列中，两者在不同的串行队列，因此不会死锁。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('- (void)viewDidLoad {\\n    [super viewDidLoad];\\n    \\n    NSLog(@\"1.%@\", [NSThread currentThread]);\\n    dispatch_queue_t queue = dispatch_queue_create(\"com.xxx.xxx\", NULL);\\n    dispatch_async(queue, ^{\\n        NSLog(@\"2.%@\", [NSThread currentThread]);\\n        dispatch_sync(queue, ^{\\n            NSLog(@\"3.%@\", [NSThread currentThread]);\\n        });\\n    });\\n}\\n')])])]),r(\"p\",[a._v(\"这段代码依然会死锁，原因跟第一段代码一样。\"),r(\"code\",[a._v(\"dispatch_async\")]),a._v(\"函数可以看成是把block里的任务放到queue中执行，这时\"),r(\"code\",[a._v(\"dispatch_sync\")]),a._v(\"处于queue这个队列中，它的block包装的任务依然处于queue队列中，因此会死锁。\")]),a._v(\" \"),r(\"h2\",{attrs:{id:\"gcd-中的函数和对象\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gcd-中的函数和对象\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" GCD 中的函数和对象\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"dispatch-group\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dispatch-group\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" \"),r(\"code\",[a._v(\"dispatch_group\")])]),a._v(\" \"),r(\"p\",[a._v(\"在串行队列中如果想在全部任务结束后再做些操作是很好处理的，但是对于并行队列就不一样了，这时候我们就需要使用 Dispatch Group.\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\\n    dispatch_group_t group = dispatch_group_create();\\n    \\n    dispatch_group_async(group, queue, ^{\\n        NSLog(@\"任务1执行\");\\n    });\\n    dispatch_group_async(group, queue, ^{\\n        NSLog(@\"任务2执行\");\\n    });\\n    dispatch_group_async(group, queue, ^{\\n        NSLog(@\"任务3执行\");\\n    });\\n    \\n    dispatch_group_notify(group, dispatch_get_main_queue(), ^{\\n        NSLog(@\"全部执行完成\");\\n    });\\n')])])]),r(\"p\",[a._v(\"这段代码中全部执行完成这个任务就会在任务1、2、3全部执行后调用。\")]),a._v(\" \"),r(\"p\",[a._v(\"还可以使用 \"),r(\"code\",[a._v(\"dispatch_group_enter\")]),a._v(\" \"),r(\"code\",[a._v(\"dispatch_group_leave\")]),a._v(\" 来实现相识的功能。与上面的区别就是不需要开新的线程\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('dispatch_group_t group = dispatch_group_create();\\n\\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\\n        NSLog(@\"全部执行完成\");\\n    });\\n\\ndispatch_group_enter(group);\\nNSLog(@\"任务1执行\");\\ndispatch_group_leave(group);\\n\\ndispatch_group_enter(group);\\nNSLog(@\"任务2执行\");\\ndispatch_group_leave(group);\\n\\ndispatch_group_enter(group);\\nNSLog(@\"任务3执行\");\\ndispatch_group_leave(group);\\n')])])]),r(\"h3\",{attrs:{id:\"dispatch-barrier\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dispatch-barrier\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" \"),r(\"code\",[a._v(\"dispatch_barrier\")])]),a._v(\" \"),r(\"p\",[a._v(\"当多个线程同时更新资源的时候会造成数据竞争，这时候我们需要使用 \"),r(\"code\",[a._v(\"dispatch_barrier\")]),a._v(\"。\")]),a._v(\" \"),r(\"p\",[r(\"code\",[a._v(\"dispatch_barrier_sync\")]),a._v(\" \"),r(\"code\",[a._v(\"dispatch_barrier_async\")]),a._v(\" 区别就是它的 block 里代码是否在当前线程执行，跟上面同步（\"),r(\"code\",[a._v(\"dispatch_sync\")]),a._v(\"）异步(\"),r(\"code\",[a._v(\"dispatch_async\")]),a._v(\")执行方式的区别是一样的。\")]),a._v(\" \"),r(\"p\",[a._v(\"比如我们经常会碰到的一个问题，atomic 修饰的属性一定是安全的吗？\")]),a._v(\" \"),r(\"p\",[a._v(\"答案是否定的，atomic 只保证了针对这个属性的成员变量的读写的原子性，而如果一个线程在连续多次读取某属性值的过程中有别的线程在同时改写该值，那么即便将属性声明为 atomic，也还是会读到不正确的属性值。使用串行队列可以解决这个问题,将所有的读取写入操作都放到串行队列中，这样就能保证线程安全了。更好的更高性能的解决办法就是利用 \"),r(\"code\",[a._v(\"dispatch_barrier\")]),a._v(\"。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"_queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\\n\\n- (NSString *)name\\n{\\n    __block NSString *localString;\\n    dispatch_sync(_queue, ^{\\n        localString = _name;\\n    });\\n    return localString;\\n}\\n\\n- (void)setName:(NSString *)name\\n{\\n    dispatch_barrier_async(_queue, ^{\\n        _name = name;\\n    });\\n}\\n\")])])]),r(\"p\",[a._v(\"当上面的执行时属性的读取操作并发执行，而写入操作必须单独执行。\")]),a._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:t(239),alt:\"\"}})]),a._v(\" \"),r(\"p\",[r(\"strong\",[a._v(\"需要注意\")]),a._v(\"的是如果我们调用 \"),r(\"code\",[a._v(\"dispatch_barrier_async\")]),a._v(\" 时提交到一个 global queue，barrier blocks 执行效果与 \"),r(\"code\",[a._v(\"dispatch_async()\")]),a._v(\" 一致；只有将 Barrier blocks 提交到使用 \"),r(\"code\",[a._v(\"DISPATCH_QUEUE_CONCURRENT\")]),a._v(\" 属性创建的并行 queue 时它才会表现的如同预期。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"dispatch-semaphore\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dispatch-semaphore\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" \"),r(\"code\",[a._v(\"dispatch_semaphore\")])]),a._v(\" \"),r(\"p\",[r(\"code\",[a._v(\"dispatch_barrier\")]),a._v(\" 能在任务这种粒度上来防止数据竞争，当我们需要更细粒度控制的时候就需要使用 \"),r(\"code\",[a._v(\"dispatch_semaphore\")]),a._v(\"。\")]),a._v(\" \"),r(\"blockquote\",[r(\"p\",[a._v(\"首先介绍一下信号量 ( semaphore ) 的概念。信号量是持有计数的信号，不过这么解释等于没解释。我们举个生活中的例子来看看。\")]),a._v(\" \"),r(\"p\",[a._v(\"假设有一个房子，它对应进程的概念，房子里的人就对应着线程。一个进程可以包括多个线程。这个房子(进程)有很多资源，比如花园、客厅等，是所有人(线程)共享的。\")]),a._v(\" \"),r(\"p\",[a._v(\"但是有些地方，比如卧室，最多只有两个人能进去睡觉。怎么办呢，在卧室门口挂上两把钥匙。进去的人(线程)拿着钥匙进去，没有钥匙就不能进去，出来的时候把钥匙放回门口。\")]),a._v(\" \"),r(\"p\",[a._v(\"这时候，门口的钥匙数量就称为信号量( semaphore )。很明显，信号量为0时需要等待，信号量不为零时，减去1而且不等待。\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\\n    /*\\n     *  生成dispatch_semaphore，其初始值设置为1\\n     *  保证访问array的线程在同一时间只有一个\\n     */\\n    dispatch_semaphore_t semaphore = dispatch_semaphore_create(1);\\n    \\n    NSMutableArray *array = [NSMutableArray array];\\n    \\n    for (int i = 0; i < 1000; ++i) {\\n        dispatch_async(queue, ^{\\n            /*\\n             某个线程执行到这里，如果信号量值为1，那么wait方法返回1，开始执行接下来的操作。\\n             与此同时，因为信号量变为0，其它执行到这里的线程都必须等待  \\n             */\\n            dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\\n            /*\\n             执行了wait方法后，信号量的值变成了0。可以进行接下来的操作。\\n             这时候其它线程都得等待wait方法返回。\\n             可以对array修改的线程在任意时刻都只有一个，可以安全的修改array\\n             */\\n            [array addObject:[NSNumber numberWithInt:i]];\\n            /*\\n             排他操作执行结束，记得要调用signal方法，把信号量的值加1。\\n             这样，如果有别的线程在等待wait函数返回，就由最先等待的线程执行。\\n             */\\n            dispatch_semaphore_signal(semaphore);\\n        });\\n    }\\n\")])])]),r(\"h4\",{attrs:{id:\"具体使用的例子\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#具体使用的例子\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 具体使用的例子\")]),a._v(\" \"),r(\"h5\",{attrs:{id:\"_1-控制并发数\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-控制并发数\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1. 控制并发数\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('// 创建队列组\\n    dispatch_group_t group = dispatch_group_create();   \\n// 创建信号量，并且设置值为10\\n    dispatch_semaphore_t semaphore = dispatch_semaphore_create(10);   \\n    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);   \\n    for (int i = 0; i < 100; i++)   \\n    {   // 由于是异步执行的，所以每次循环Block里面的dispatch_semaphore_signal根本还没有执行就会执行dispatch_semaphore_wait，从而semaphore-1.当循环10此后，semaphore等于0，则会阻塞线程，直到执行了Block的dispatch_semaphore_signal 才会继续执行\\n        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);   \\n        dispatch_group_async(group, queue, ^{   \\n            NSLog(@\"%i\",i);   \\n            sleep(2);   \\n// 每次发送信号则semaphore会+1，\\n            dispatch_semaphore_signal(semaphore);   \\n        });   \\n    }\\n')])])]),r(\"h5\",{attrs:{id:\"_2-限制请求频次\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-限制请求频次\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 2. 限制请求频次\")]),a._v(\" \"),r(\"p\",[a._v(\"每次请求发出后由于信号量0则其他线程必须等待，只有等请求返回成功或者失败后信号量设为1，这时候才能继续其他的网络请求。\")]),a._v(\" \"),r(\"p\",[a._v(\"需要注意死锁的问题。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('- (void)request1{\\n    //创建信号量并设置计数默认为0\\n    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\\n    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\\n    manager.responseSerializer = [AFJSONResponseSerializer serializer];\\n    manager.completionQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);//关键的就是这句，如果是默认在主线程的回调就会造成死锁\\n    NSString *url = [NSString stringWithFormat:@\"%s\",\"http://v3.wufazhuce.com:8000/api/channel/movie/more/0?platform=ios&version=v4.0.1\"];\\n    [manager GET:url parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {\\n        \\n    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\\n        NSArray *data = responseObject[@\"data\"];\\n        for (NSDictionary *dic in data) {\\n            NSLog(@\"请求1---%@\",dic[@\"id\"]);\\n        }\\n        //计数加1\\n        dispatch_semaphore_signal(semaphore);\\n        //11380-- data.lastObject[@\"id\"];\\n    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {\\n        NSLog(@\"shibai...\");\\n        //计数加1\\n        dispatch_semaphore_signal(semaphore);\\n    }];\\n    //若计数为0则一直等待\\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\\n}\\n')])])]),r(\"h2\",{attrs:{id:\"扩展\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#扩展\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 扩展\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"_1-完善代码\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-完善代码\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1. 完善代码\")]),a._v(\" \"),r(\"p\",[a._v(\"完善下面的代码，使其能正确执行\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"int foo(int i, int j) {\\n    int sum = 0;\\n    dispatch_async(queue, ^{\\n        sum = i + j;\\n    });\\n    return sum;\\n}\\n\")])])]),r(\"h4\",{attrs:{id:\"_1-使用同步操作\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-使用同步操作\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1. 使用同步操作\")]),a._v(\" \"),r(\"p\",[a._v(\"串行并行队列都可以，但是注意不要使用当前队列\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('int foo1(int i, int j) {\\n    __block int sum = 0;\\n    \\n    dispatch_queue_t queue = dispatch_queue_create(\"com.zhouke\", DISPATCH_QUEUE_CONCURRENT);\\n    dispatch_sync(queue, ^{\\n        sum = i + j;\\n    });\\n    \\n    return sum;\\n}\\n')])])]),r(\"h4\",{attrs:{id:\"_2-使用-dispatch-group\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-使用-dispatch-group\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 2. 使用 \"),r(\"code\",[a._v(\"dispatch_group\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('int foo(int i, int j) {\\n    __block int sum = 0;\\n    dispatch_queue_t queue = dispatch_queue_create(\"com.zhouke\", DISPATCH_QUEUE_SERIAL);\\n    dispatch_group_t group = dispatch_group_create();\\n    \\n    dispatch_group_async(group, queue, ^{\\n        sum = i + j;\\n    });\\n    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);\\n\\n    return sum;\\n}\\n')])])]),r(\"h4\",{attrs:{id:\"_3-使用-dispatch-barrier\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-使用-dispatch-barrier\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 3. 使用 \"),r(\"code\",[a._v(\"dispatch_barrier\")])]),a._v(\" \"),r(\"p\",[a._v(\"本质上跟第一种是一样的。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('int foo(int i, int j) {\\n    __block int sum = 0;\\n    \\n    dispatch_queue_t queue = dispatch_queue_create(\"com.zhouke\", DISPATCH_QUEUE_CONCURRENT);\\n    \\n    dispatch_barrier_sync(queue, ^{\\n        sum = i + j;\\n    });\\n    return sum;\\n}\\n')])])]),r(\"h4\",{attrs:{id:\"_4-使用信号量\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-使用信号量\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 4. 使用信号量\")]),a._v(\" \"),r(\"p\",[a._v(\"注意不要使用当前队列，否则依然会造成死锁。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('int foo(int i, int j) {\\n    __block int sum = 0;\\n    \\n    dispatch_queue_t queue = dispatch_queue_create(\"com.zhouke\", DISPATCH_QUEUE_CONCURRENT);\\n    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\\n    \\n    dispatch_async(queue, ^{\\n        sum = i + j;\\n        dispatch_semaphore_signal(semaphore);\\n    });\\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\\n    \\n    return sum;\\n}\\n')])])]),r(\"h3\",{attrs:{id:\"异步转同步\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异步转同步\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 异步转同步\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_1-利用-dispatch-barrier\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-利用-dispatch-barrier\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1. 利用 \"),r(\"code\",[a._v(\"dispatch_barrier\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('    // 创建队列\\n    dispatch_queue_t queue = dispatch_queue_create(\"task\", DISPATCH_QUEUE_CONCURRENT);\\n    // 添加任务\\n    dispatch_async(queue, ^{\\n        NSLog(@\"1===task===%@\", [NSThread currentThread]);\\n    });\\n    dispatch_async(queue, ^{\\n        NSLog(@\"2===task===%@\", [NSThread currentThread]);\\n    });\\n    dispatch_async(queue, ^{\\n        NSLog(@\"3===task===%@\", [NSThread currentThread]);\\n    });\\n    // 与dispatch_barrier_async区别就是它的 block 里代码是否在当前线程执行\\n    dispatch_barrier_sync(queue, ^{\\n        NSLog(@\"===barrier==%@\", [NSThread currentThread]);\\n    });\\n    dispatch_async(queue, ^{\\n        NSLog(@\"4===task===%@\", [NSThread currentThread]);\\n    });\\n    dispatch_async(queue, ^{\\n        NSLog(@\"5===task===%@\", [NSThread currentThread]);\\n    });\\n    dispatch_async(queue, ^{\\n        NSLog(@\"6===task===%@\", [NSThread currentThread]);\\n    });\\n')])])]),r(\"p\",[a._v(\"会阻塞当前线程，不能在主线程用。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_2-使用-dispatch-group-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-使用-dispatch-group-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 2. 使用 \"),r(\"code\",[a._v(\"dispatch_group\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(' dispatch_group_t group = dispatch_group_create();\\n\\n// 请求 1\\ndispatch_group_enter(group);\\n[RequestManager requestOnSucceeded:^(id result) {\\n        NSLog(@\"请求 1 完成\");\\n        dispatch_group_leave(group);\\n    } onError:^(NSInteger code, NSString *message) {\\n        NSLog(@\"请求 1 失败\");\\n        dispatch_group_leave(group);\\n    }];\\n\\n// 请求 2\\ndispatch_group_enter(group);\\n[RequestManager requestOnSucceeded:^(id result) {\\n        NSLog(@\"请求 2 完成\");\\n        dispatch_group_leave(group);\\n    } onError:^(NSInteger code, NSString *message) {\\n        NSLog(@\"请求 2 失败\");\\n        dispatch_group_leave(group);\\n    }];\\n\\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\\n       NSLog(@\"全部任务完成==%@\", [NSThread currentThread]);\\n    });\\n')])])]),r(\"h4\",{attrs:{id:\"_3-使用信号量\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-使用信号量\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 3. 使用信号量\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v('    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\\n    \\n    dispatch_queue_t queue = dispatch_queue_create(\"task\", DISPATCH_QUEUE_CONCURRENT);\\n    dispatch_async(queue, ^{\\n        NSLog(@\"1===task===%@\", [NSThread currentThread]);\\n        \\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), queue, ^{\\n            dispatch_semaphore_signal(semaphore);\\n        });\\n    });\\n    \\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\\n    dispatch_async(queue, ^{\\n        NSLog(@\"2===task===%@\", [NSThread currentThread]);\\n    });\\n')])])]),r(\"p\",[a._v(\"由于 AFN 等第三方网络请求框架的成功失败回调都是在主线程，因此需要特别注意死锁的问题。\")]),a._v(\" \"),r(\"h1\",{attrs:{id:\"参考资料\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考资料\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 参考资料\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"Objective-C高级编程 iOS与OS X多线程和内存管理》\")]),a._v(\" \"),r(\"li\",[a._v(\"《Effective Objective-C 2.0  编写高质量iOS与OS X代码的52个有效方法》\")]),a._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://bestswifter.com/multithreadconclusion/#\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"iOS多线程编程总结 \"),r(\"OutboundLink\")],1)]),a._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://www.jianshu.com/p/96b93aa05bcd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"iOS基础深入补完计划--GCD\"),r(\"OutboundLink\")],1)]),a._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://www.cnblogs.com/buerjj/p/8041676.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"ios GCD将异步转换为同步\"),r(\"OutboundLink\")],1)])])])},[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}