{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{284:function(e,t,a){e.exports=a.p+\"assets/img/03-decorate-pattern-2.92be42d5.png\"},285:function(e,t,a){e.exports=a.p+\"assets/img/03-decorate-pattern-3.3e461299.png\"},286:function(e,t,a){e.exports=a.p+\"assets/img/03-decorate-pattern-4.0da726a6.png\"},418:function(e,t,a){\"use strict\";a.r(t);var r=a(0),s=Object(r.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"装饰者模式\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#装饰者模式\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 装饰者模式\")]),e._v(\" \"),r(\"p\",[e._v(\"购买咖啡的时候顾客可以要求加入各种\\b调料，而咖啡最后会根据加入调料的不同和多少来收取不同的费用。因此在\\b构建咖啡这个\\b需求的时候，按照面向对象的思想最直接想到的就是抽象出来一个咖啡的父类，然后有各种调料对应的属性。同时咖啡的费用通过 \"),r(\"code\",[e._v(\"cost\")]),e._v(\" 方法来获取，方法里面会计算好各种调料的份额和价钱然后算出总价。\\b添加新的口味咖啡的时候就继承自咖啡这个父类来实现。并且\\b新口味咖啡这些子类会\\b重写并调用父类的 \"),r(\"code\",[e._v(\"cost\")]),e._v(\" 来实现价格的计算。具体如下图。\")]),e._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:a(284),alt:\"\"}})]),e._v(\" \"),r(\"p\",[e._v(\"上面的例子\\b可以解决部分问题，但是当\\b遇到一些需求变更\\b，比如某种调料的价格发生的变动或者要加入新的调料的种类的时候我们都需要修改父类。这样以来程序的扩展性就出现了问题。\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"开放-关闭原则\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开放-关闭原则\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 开放-\\b关闭原则\")]),e._v(\" \"),r(\"p\",[r(\"strong\",[e._v(\"类应该对扩展开放，对修改关闭\")])]),e._v(\" \"),r(\"p\",[e._v(\"\\b这是因为在实际的开发过程中总是伴随着新的需求，这就要求我们要有开放的能力来承接新的需求，但是\\b是如果直接修改代码的话就会不可避免的引进\\b bug 或者产生意外的副作用。因此我们在设计代码的时候应该对扩展开放，而对修改关闭。\")]),e._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:a(285),alt:\"\"}})]),e._v(\" \"),r(\"blockquote\",[r(\"p\",[r(\"strong\",[e._v(\"ps\")]),e._v(\" 让程序中所有的地方都遵循\"),r(\"code\",[e._v(\"开发-关闭\")]),e._v(\"原则并不是一个好的设计。因为在遵循该\\b原则的时候通常会引进新的抽象层级，增加代码的复杂度。因此需要根据工作领域的了解和设计经验来找出需要扩展的部分来遵循开发-关闭的设计原则。\")])]),e._v(\" \"),r(\"h2\",{attrs:{id:\"定义\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 定义\")]),e._v(\" \"),r(\"p\",[e._v(\"动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。\")]),e._v(\" \"),r(\"p\",[e._v(\"个人感觉就是在扩展功能的时候生成一个装饰者，提供了一些扩展功能，并且该装饰者与被装饰者有相同的父类，这样以来\\b所有需要\\b被装饰者的地方都可以使用装饰者代替。\")]),e._v(\" \"),r(\"p\",[e._v(\"一个形象的比喻就是画和\\b画框，画是被装饰者，画框是装饰者。画是\\b不能直接挂到墙上的，现在把画放到画框中就可以挂到墙上了，这就是扩展功能。并且这样也没有涉及到修改画。而\\b之前画的功能就是被欣赏，现在画和画框也能被欣赏\\b。\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"具体实现\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#具体实现\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 具体实现\")]),e._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:a(286),alt:\"\"}})]),e._v(\" \"),r(\"p\",[e._v(\"具体的实现及说明可以查看\"),r(\"a\",{attrs:{href:\"./code/03-decorrate-pattern/01-Beverage\"}},[e._v(\"代码\")])]),e._v(\" \"),r(\"p\",[e._v(\"需要说明以下几点：\")]),e._v(\" \"),r(\"ol\",[r(\"li\",[e._v(\"由于 OC 中无法声明抽象类，因此在抽象类的 init 方法和抽象方法上加上断言来实现子类必须重写的这一\\b需求。\")])]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v('\\b- (instancetype)init\\n{\\n    NSAssert(![self isMemberOfClass:[Beverage class]], @\"AbstractDownloader is an abstract class, you should not instantiate it directly.\");\\n    return [super init];\\n}\\n')])])]),r(\"ol\",{attrs:{start:\"2\"}},[r(\"li\",[e._v(\"分析一下\\b装饰者模式的具体使用\")])]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v('// 装饰者 Mocha 的初始化方法初始化一个装饰器，beverage2 的实际类型是 Mocha（继承自 CondimentDecorator， 而它又继承自 Beverage），这时它内部的 _beverage 成员变量是上面异步初始化的 DarkRose\\nbeverage2 = [[Mocha alloc] initWithBeverage:beverage2];\\n// 装饰者 Soy 的初始化方法初始化一个装饰器，beverage2 的实际类型是 Soy（继承自 CondimentDecorator， 而它又继承自 Beverage），这时它内部的 _beverage 成员变量是上面异步初始化的 Mocha\\nbeverage2 = [[Soy alloc] initWithBeverage:beverage2];\\n// 装饰者 Whip 的初始化方法初始化一个装饰器，beverage2 的实际类型是 Whip（继承自 CondimentDecorator， 而它又继承自 Beverage），这时它内部的 _beverage 成员变量是上面异步初始化的 Soy\\nbeverage2 = [[Whip alloc] initWithBeverage:beverage2];\\n\\n// 现在 beverage2 的类型是 Whip， 因此该方法会先去调 Whip 的 getDescript， 而后是 Soy 的 getDescript，接着是 Mocha 的 getDescript 最后是 DarkRose 继承自父类的方法 getDescript 返回自己的成员变量 _descript， 它的值是 @\"Dark Rose Coffee\"\\nNSString *descript = [beverage2 getDescript];\\n// cost 方法的调用过程同上\\nCGFloat cost = [beverage2 cost];\\nNSLog(@\"%@ $%.2f\", descript, cost);\\n')])])]),r(\"p\",[e._v(\"输出\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"2018-06-23 19:21:38.455855+0800 01-Beverage[15712:538948] Dark Rose Coffee, Mocha, Soy, Whip $1.44\\n\")])])]),r(\"h2\",{attrs:{id:\"添加大杯中杯小杯\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#添加大杯中杯小杯\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 添加大杯中杯小杯\")]),e._v(\" \"),r(\"p\",[e._v(\"具体的实现及说明可以查看\"),r(\"a\",{attrs:{href:\"./code/03-decorrate-pattern/02-Beverage\"}},[e._v(\"代码\")])]),e._v(\" \"),r(\"p\",[e._v(\"\\b简单来说就遵循开发关闭，我们要做的就只是在 Soy 这个类中，修改其 cost 方法，让其通过杯子的大小进行计算。这样一来就不会影响之前的功能。\")])])},[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}