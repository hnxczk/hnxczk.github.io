{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{294:function(a,n,e){a.exports=e.p+\"assets/img/01-strategy-pattern-1.b164b0c5.png\"},295:function(a,n,e){a.exports=e.p+\"assets/img/01-strategy-pattern-2.bdaa0dfb.png\"},420:function(a,n,e){\"use strict\";e.r(n);var t=e(0),s=Object(t.a)({},function(){var a=this,n=a.$createElement,t=a._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"策略模式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#策略模式\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 策略模式\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"总结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 总结\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"策略模式\")]),a._v(\"：定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"优点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#优点\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 优点\")]),a._v(\" \"),t(\"p\",[a._v(\"策略模式主要优点在于对“开闭原则”的完美支持，在不修改原有系统的基础上可以更换算法或者增加新的算法，它很好地管理算法族，提高了代码的复用性，是一种替换继承，避免多重条件转移语句的实现方式；其缺点在于客户端必须知道所有的策略类，并理解其区别，同时在一定程度上增加了系统中类的个数，可能会存在很多策略类。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"使用情况\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用情况\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 使用情况\")]),a._v(\" \"),t(\"p\",[a._v(\"在一个系统里面有许多类，它们之间的区别仅在于它们的行为，使用策略模式可以动态地让一个对象在许多行为中选择一种行为；一个系统需要动态地在几种算法中选择一种；避免使用难以维护的多重条件选择语句；希望在具体策略类中封装算法和与相关的数据结构\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"设计原则\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设计原则\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 设计原则\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[t(\"strong\",[a._v(\"把会变化的部分抽取并封装起来，好让其他部分不受影响\")])]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"面对接口编程，而不是面向实现编程\")])]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"多用组合，少用继承\")])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"模拟鸭子的游戏\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#模拟鸭子的游戏\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 模拟鸭子的游戏\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"利用继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#利用继承\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 利用继承\")]),a._v(\" \"),t(\"p\",[a._v(\"游戏中会出现各式各样的鸭子，熟悉面向对象思想的第一反应就是设计一个鸭子的父类（Duck），所有类型的鸭子都继承自该类。比如绿头鸭（MallardDuck）和红头鸭（RedheadDuck）。具体代码如下。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@interface Duck : NSObject\\n\\n- (void)quack;\\n- (void)swim;\\n- (void)display;\\n\\n@end\\n\\n@implementation Duck\\n\\n- (void)quack\\n{\\n    NSLog(@\"呱呱\");\\n}\\n\\n- (void)swim\\n{\\n    NSLog(@\"swim\");\\n}\\n\\n- (void)display\\n{\\n    NSLog(@\"display\");\\n}\\n\\n@end\\n\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('#import \"Duck.h\"\\n\\n@interface MallardDuck : Duck\\n\\n@end\\n\\n@implementation MallardDuck\\n\\n- (void)display\\n{\\n    NSLog(@\"display-绿头鸭\");\\n}\\n\\n@end\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('#import \"Duck.h\"\\n\\n@interface RedheadDuck : Duck\\n\\n@end\\n\\n@implementation RedheadDuck\\n\\n- (void)display\\n{\\n    NSLog(@\"display-红头鸭\");\\n}\\n\\n@end\\n\\n')])])]),t(\"p\",[a._v(\"这样的话在需要不同的鸭子的时候分别实例化不同的对象就可以了。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"MallardDuck *mallarDuck = [[MallardDuck alloc] init];\\n[mallarDuck display];\\n        \\nRedheadDuck *redheadDuck = [[RedheadDuck alloc] init];\\n[redheadDuck display];\\n\")])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"2018-06-18 20:34:47.878191+0800 01-SimUDuck[34855:1217414] display-绿头鸭\\n2018-06-18 20:34:47.878693+0800 01-SimUDuck[34855:1217414] display-红头鸭\\n\")])])]),t(\"p\",[a._v(\"目前来看是没有问题的，但是当我们需要一个 “fly” 功能的时候，我们会想着在父类（Duck）中添加一个 fly 方法的时候。这样就会有一个问题，就是有些鸭子是不会飞的（比如橡皮鸭子）。一种解决方法就是在橡皮鸭子（RubberDuck）中覆写父类的 fly 方法。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@implementation RubberDuck\\n\\n- (void)quack\\n{\\n    NSLog(@\"吱吱\");\\n}\\n\\n- (void)display\\n{\\n    NSLog(@\"display-橡皮鸭子\");\\n}\\n\\n- (void)fly\\n{\\n    // 覆盖什么也不做\\n}\\n')])])]),t(\"p\",[a._v(\"这样一来也能解决问题，但是当我们还有其他鸭子比如诱饵鸭子这种既不会叫也不会飞的鸭子的时候也要覆盖相应的方法。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"利用接口\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#利用接口\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 利用接口\")]),a._v(\" \"),t(\"p\",[a._v(\"利用接口的解决方案就是把单个的行为抽象为一个协议，当你的一种类型需要相关的行为的时候让它遵守协议并实现协议中的方法即可。这样的话依然无法优雅的实现相关需求。这是因为我们的项目不是一成不变的，或者说唯一不变的就是变化。当某个需求修改是这种实现方式需要修改各个实现该协议的类，这无疑是个大工程。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"把问题归零\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#把问题归零\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 把问题归零\")]),a._v(\" \"),t(\"p\",[a._v(\"设计原则\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"把会变化的部分抽取并封装起来，好让其他部分不受影响\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"分开变化的和不变化的部分\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分开变化的和不变化的部分\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 分开变化的和不变化的部分\")]),a._v(\" \"),t(\"p\",[a._v(\"分析上面的例子我们可以看到除了 quack 和 fly 方法之外别的方法都是没有特别需要修改的，因此除了 Duck 外拆分出两组类，一个跟 quack 有关，一个跟 fly 有关。\")]),a._v(\" \"),t(\"p\",[a._v(\"设计原则\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"面对接口编程，而不是面向实现编程\")])]),a._v(\" \"),t(\"p\",[a._v(\"具体实现如下\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"声明两个协议 FlyBehavior 和 QuackBehavior\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"@protocol FlyBehavior<NSObject>\\n\\n- (void)fly;\\n\\n@end\\n\\n@protocol QuackBehavior<NSObject>\\n\\n- (void)qucak;\\n\\n@end\\n\")])])]),t(\"ol\",{attrs:{start:\"2\"}},[t(\"li\",[a._v(\"实现协议的几个类\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@interface FlyWithWings : NSObject<FlyBehavior>\\n\\n@end\\n\\n@implementation FlyWithWings\\n\\n- (void)fly\\n{\\n    NSLog(@\"会飞的鸭子\");\\n}\\n\\n@end\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@interface FlyWithWings : NSObject<FlyBehavior>\\n\\n@end\\n\\n@implementation FlyNoWay\\n\\n- (void)fly\\n{\\n    NSLog(@\"不会飞的鸭子\");\\n}\\n\\n@end\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@interface Quack : NSObject<QuackBehavior>\\n\\n@end\\n\\n@implementation Quack\\n\\n- (void)qucak\\n{\\n    NSLog(@\"gua gua\");\\n}\\n\\n@end\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@interface Squeak : NSObject<QuackBehavior>\\n\\n@end\\n\\n@implementation Squeak\\n\\n- (void)qucak\\n{\\n    NSLog(@\"zi zi\");\\n}\\n\\n@end\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@interface MuteQuack : NSObject<QuackBehavior>\\n\\n@end\\n\\n@implementation MuteQuack\\n\\n- (void)qucak\\n{\\n    NSLog(@\"do nothing\");\\n}\\n\\n@end\\n')])])]),t(\"ol\",{attrs:{start:\"3\"}},[t(\"li\",[a._v(\"修改 Duck 的内部实现，为其添加两个属性。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('@interface Duck : NSObject\\n\\n@property (nonatomic, strong) id<QuackBehavior> quackBehavior;\\n@property (nonatomic, strong) id<FlyBehavior> flyBehavior;\\n\\n- (void)performQuack;\\n- (void)performFly;\\n- (void)swim;\\n- (void)display;\\n\\n@end\\n\\n@implementation Duck\\n\\n- (void)performQuack\\n{\\n    [self.quackBehavior qucak];\\n}\\n\\n- (void)performFly\\n{\\n    [self.flyBehavior fly];\\n}\\n\\n- (void)swim\\n{\\n    NSLog(@\"swim\");\\n}\\n\\n- (void)display\\n{\\n    NSLog(@\"display\");\\n}\\n\\n@end\\n')])])]),t(\"ol\",{attrs:{start:\"4\"}},[t(\"li\",[a._v(\"声明一个特定类型的子类 MallardDuck\\b， 并修改器初始化方法。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"@interface MallardDuck : Duck\\n\\n@end\\n\\n@implementation MallardDuck\\n\\n- (instancetype)init\\n{\\n    if (self = [super init]) {\\n        self.quackBehavior = [[Quack alloc] init];\\n        self.flyBehavior = [[FlyWithWings alloc] init];\\n    }\\n    return self;\\n}\\n\\n@end\\n\")])])]),t(\"ol\",{attrs:{start:\"5\"}},[t(\"li\",[a._v(\"这样以来在使用的时候直接出示化对应的子类。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"MallardDuck *mallardDuck = [[MallardDuck alloc] init];\\n[mallardDuck performFly];\\n[mallardDuck performQuack];\\n\")])])]),t(\"p\",[a._v(\"经过上面的几个步骤就实现了策略模式的设计，这样的好处就是把可变的与不可变的分离开来。这样一来就能在修改少部分代码的情况下实现功能的修改。\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:e(294),alt:\"关系图\"}})]),a._v(\" \"),t(\"p\",[a._v(\"说明\")]),a._v(\" \"),t(\"img\",{attrs:{src:e(295),height:\"110\"}}),a._v(\" \"),t(\"h3\",{attrs:{id:\"‘有一个‘可能比’是一个‘更好\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#‘有一个‘可能比’是一个‘更好\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" ‘有一个‘可能比’是一个‘更好\")]),a._v(\" \"),t(\"p\",[a._v(\"“有一个”：每一个鸭子都有一个FlyBehavior和一个QuackBehavior，好将飞行和呱呱叫委托给它们代为处理。\\n当你将两个类结合起来使用，如同本例一般，这就是组合，这种做法和“继承”不同的地方在于，鸭子的行为不是继承来的，而是和适当的行为对象“组合”来的。\")]),a._v(\" \"),t(\"p\",[a._v(\"设计原则\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"多用组合，少用继承\")])]),a._v(\" \"),t(\"p\",[a._v(\"使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，还可以动态的修改行为。\")])])},[],!1,null,null,null);n.default=s.exports}}]);","extractedComments":[]}