{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{429:function(a,t,r){\"use strict\";r.r(t);var n=r(0),i=Object(n.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 排序\")]),a._v(\" \"),r(\"h2\",{attrs:{id:\"_11-排序：冒泡，插入，选择\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-排序：冒泡，插入，选择\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 11 排序：冒泡，插入，选择\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"如何分析一个排序算法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何分析一个排序算法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 如何分析一个排序算法\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"执行效率\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行效率\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 执行效率\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"最好情况、最坏情况、平均情况时间复杂度\")]),a._v(\" \"),r(\"li\",[a._v(\"时间复杂度的系数、常数、低阶\")]),a._v(\" \"),r(\"li\",[a._v(\"比较次数和交换、移动次数\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"内存消耗\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存消耗\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 内存消耗\")]),a._v(\" \"),r(\"p\",[a._v(\"原地排序：特指空间复杂度是 O(1)的排序算法。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"稳定性\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#稳定性\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 稳定性\")]),a._v(\" \"),r(\"p\",[a._v(\"经过排序算法的排序之后，如果原来数据中相同元素的前后顺序没有发生改变，这种算法就称为稳定的排序算法，否则称为不稳定的排序算法。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"冒泡排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#冒泡排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 冒泡排序\")]),a._v(\" \"),r(\"p\",[a._v(\"冒泡排序的原理就是比较相邻元素的大小，符合条件则交换相邻元素的位置，否则继续遍历。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"void bubbleSort(int *array, int n)\\n{\\n    if (n <= 1) return;\\n    \\n    for (int i = 0; i < n; ++i) {\\n        bool change = false;\\n        for (int j = 0; j < n-i-1; ++j) {\\n            if (array[j] > array[j+1]) {\\n                int tmp = array[j+1];\\n                array[j+1] = array[j];\\n                array[j] = tmp;\\n                change = true;\\n            }\\n        }\\n        if (!change) break;\\n    }\\n}\\n\")])])]),r(\"p\",[r(\"strong\",[a._v(\"编码的过程\")])]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"由于每次冒泡只能确定一个最值的位置，因此要想全部排序就需要两个 for 循环\")]),a._v(\" \"),r(\"li\",[a._v(\"外侧循环表示冒泡的次数，因此循环次数与元素个数 n 相同\")]),a._v(\" \"),r(\"li\",[a._v(\"内侧循环执行冒泡操作，由于每次冒泡能确定一个元素的最终位置，因此第 i 次冒泡需要操作的元素个数是 n-1-i 个。因此内侧循环从 0 开始 执行 n-i-1 次\")]),a._v(\" \"),r(\"li\",[a._v(\"如果一次冒泡过程中没有改变元素的位置，只表明元素的顺序已经排好，因此可以通过一个标识标识一次冒泡的过程中是否改变元素位置，如果没有更改就直接退出外侧循环。这样实现了冒泡的优化\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"冒泡排序是否是原地算法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#冒泡排序是否是原地算法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 冒泡排序是否是原地算法\")]),a._v(\" \"),r(\"p\",[a._v(\"是，空间复杂度是 O(1)\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"冒泡排序是否是稳定的排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#冒泡排序是否是稳定的排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 冒泡排序是否是稳定的排序\")]),a._v(\" \"),r(\"p\",[a._v(\"是，冒泡的过程中只有当相邻元素的大小不同时才会去改变顺序，相同的元素不会改变顺序。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"冒泡排序的时间复杂度\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#冒泡排序的时间复杂度\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 冒泡排序的时间复杂度\")]),a._v(\" \"),r(\"p\",[a._v(\"最好情况时间复杂度 O(n)\\n最坏情况时间复杂度 O(n^2)\")]),a._v(\" \"),r(\"p\",[a._v(\"平均时间复杂度通过有序度和逆序度分析\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"有序度：数组中具有有序关系的元素对的个数\")]),a._v(\" \"),r(\"li\",[a._v(\"逆序度：数组中具有逆序关系的元素对的个数\")]),a._v(\" \"),r(\"li\",[a._v(\"满有序度：完全有序的数组的有序度\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"逆序度 = 满有序度 - 有序度\\n\")])])]),r(\"p\",[a._v(\"对于 n 个元素的数组，满有序度为 n*(n-1)/2\")]),a._v(\" \"),r(\"p\",[a._v(\"最坏情况下有序度为 0，则逆序度为 n*(n-1)/2。这时候要将逆序度减为 0，则需要 n*(n-1)/2 次交换。\")]),a._v(\" \"),r(\"p\",[a._v(\"因此平均情况下需要 n*(n-1)/4 次交换，因此平均情况复杂度为 O(n^2)\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"插入排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插入排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 插入排序\")]),a._v(\" \"),r(\"p\",[a._v(\"插入排序的原理就是动态的往有序集合中添加数据。将数组分为已排序区和未排序区，不断将未排序区的元素插入到已排序区中。初始的已排序区只有数组的第一个元素，然后不断添加，直到全部排序完成。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"void insertionSort(int *array, int n)\\n{\\n    if (n <= 1) return;\\n    \\n    for (int i = 1; i < n; ++i) {\\n        int val = array[i];\\n        int j = i-1;\\n        for (; j >= 0; --j) {\\n            if (array[j] > val) {\\n                array[j+1] = array[j];\\n            } else {\\n                break;\\n            }\\n        }\\n        array[j+1] = val;\\n    }\\n}\\n\")])])]),r(\"p\",[r(\"strong\",[a._v(\"编码的过程\")])]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"由于需要把数组的所有元素不断插入已排序区，在插入排序区的过程中需要不断比较插入元素与之前已排序区元素的大小，因此需要两个 for 循环\")]),a._v(\" \"),r(\"li\",[a._v(\"外侧循环用来遍历所有的元素，因此从 0 开始，循环 n 次\")]),a._v(\" \"),r(\"li\",[a._v(\"内侧循环用来比较已经选中的元素 array[i] 与已排序区的元素比较，从后往前遍历，因此从 i-1 开始，循环 i-1 次\")]),a._v(\" \"),r(\"li\",[a._v(\"在内侧循环比较已选中元素 array[i] 与已排序元素时，如果已选中元素满足条件（比如上面的 大于）就替换二者位置，相当于把已选中元素插入到当前已排序元素之前，直到不满足条件说明 选中元素插入到了正确的位置，跳出循环。\")]),a._v(\" \"),r(\"li\",[a._v(\"内侧循环过一次之后，将 选中的元素插入到内循环结束时的位置，由于内循环体结束时 j 是最终插入的前一个位置，因此需要把选中的元素插入到 j+1 的位置上。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"插入排序是否是原地算法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插入排序是否是原地算法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 插入排序是否是原地算法\")]),a._v(\" \"),r(\"p\",[a._v(\"是，空间复杂度是 O(1)\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"插入排序是否是稳定的排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插入排序是否是稳定的排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 插入排序是否是稳定的排序\")]),a._v(\" \"),r(\"p\",[a._v(\"是，插入的过程中可以将后面出现的元素插入到前面出现元素的后面，这样以来就不会改变之前相同元素的顺序。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"插入排序的时间复杂度\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插入排序的时间复杂度\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 插入排序的时间复杂度\")]),a._v(\" \"),r(\"p\",[a._v(\"最好是时间复杂度为 O(n)\\n最坏情况时间复杂度为 O(n^2)\")]),a._v(\" \"),r(\"p\",[a._v(\"有序数组中插入某个元素的平均时间复杂度是 O(n), 而插入排序需要遍历数组的元素，将每个元素都插入到有序区间中，因此其平均时间复杂度为 O(n^2)\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"选择排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#选择排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 选择排序\")]),a._v(\" \"),r(\"p\",[a._v(\"选择排序通过不断遍历未排序的区域，每次都用一个变量记录最小（大）值的位置，找到位置之后在遍历结束后交换最值与第一个未排序元素的位置\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"void selectionSort(int *array, int n)\\n{\\n    if (n <= 1) return;\\n    \\n    for (int i = 0; i < n; ++i) {\\n        int index = i;\\n        for (int j = i+1; j < n; ++j) {\\n            if (array[j] < array[index]) {\\n                index = j;\\n            }\\n        }\\n        if (index != i) {\\n            int tmp = array[i];\\n            array[i] = array[index];\\n            array[index] = tmp;\\n        }\\n    }\\n}\\n\")])])]),r(\"p\",[r(\"strong\",[a._v(\"实现步骤\")])]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"遍历未排序区查找最值需要一个循环，每次遍历完未排序区之后未排序区就发生了变化，因此需要再次遍历直到未排序区消失，于是要有两个循环嵌套\")]),a._v(\" \"),r(\"li\",[a._v(\"由于每次内侧循环能确定一个最值的位置，因此外循环从 0 开始 遍历 n 次\")]),a._v(\" \"),r(\"li\",[a._v(\"内侧循环用来遍历当前未排序区，查找到最值的位置，然后在循环结束之后交换未排序区的第一个元素和最值的位置\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"选择排序是否是原地算法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#选择排序是否是原地算法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 选择排序是否是原地算法\")]),a._v(\" \"),r(\"p\",[a._v(\"是，空间复杂度是 O(1)\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"选择排序是否是稳定的排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#选择排序是否是稳定的排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 选择排序是否是稳定的排序\")]),a._v(\" \"),r(\"p\",[a._v(\"不是，每次选择最值之后就与未排序区第一个位置交换，这就会打乱之前的相同元素的排序，因此不是稳定的排序\\b。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"插入排序的时间复杂度-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插入排序的时间复杂度-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 插入排序的时间复杂度\")]),a._v(\" \"),r(\"p\",[a._v(\"最好是时间复杂度为 O(n)\\n最坏情况时间复杂度为 O(n^2)\\n其平均时间复杂度为 O(n^2)\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"插入与冒泡比较\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插入与冒泡比较\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 插入与冒泡比较\")]),a._v(\" \"),r(\"p\",[a._v(\"冒泡排序中每次交换相邻元素位置需要的进行的操作比插入排序的数据移动来说更为耗时，因此插入排序一般优于冒泡排序。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"qa-使用链表实现\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#qa-使用链表实现\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" QA 使用链表实现\")]),a._v(\" \"),r(\"blockquote\",[r(\"p\",[a._v(\"对于老师所提课后题，觉得应该有个前提，是否允许修改链表的节点value值，还是只能改变节点的位置。一般而言，考虑只能改变节点位置，冒泡排序相比于数组实现，比较次数一致，但交换时操作更复杂；插入排序，比较次数一致，不需要再有后移操作，找到位置后可以直接插入，但排序完毕后可能需要倒置链表；选择排序比较次数一致，交换操作同样比较麻烦。综上，时间复杂度和空间复杂度并无明显变化，若追求极致性能，冒泡排序的时间复杂度系数会变大，插入排序系数会减小，选择排序无明显变化。\")])]),a._v(\" \"),r(\"h2\",{attrs:{id:\"_12-排序：归并排序，快速排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-排序：归并排序，快速排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 12 排序：归并排序，快速排序\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"归并排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#归并排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 归并排序\")]),a._v(\" \"),r(\"p\",[a._v(\"归并排序使用了\"),r(\"strong\",[a._v(\"分治思想\")]),a._v(\"，将一个大问题分解成小的子问题。\\b而分治算法一般都\\b通过递归来实现。\\b\\b\")]),a._v(\" \"),r(\"p\",[a._v(\"其思路就是讲一个数组的排序分为两个子数组的排序，两个子数组排序完成后按大小顺序合并两个子数组就等到了排好序的整个数组。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"void merge_sort_recursive(int arr[], int reg[], int start, int end)\\n{\\n    // 递归基础\\n    if (start >= end) return;\\n    \\n    // 求中间点，len >> 1 相当于 len / 2\\n    int len = end - start, mid = (len >> 1) + start;\\n    // 分别归并排序\\n    int start1 = start, end1 = mid;\\n    int start2 = mid + 1, end2 = end;\\n\\n    merge_sort_recursive(arr, reg, start1, end1);\\n    merge_sort_recursive(arr, reg, start2, end2);\\n    \\n    // 合并排序好的数组\\n    // k 用来标识已经合并好数组中的最后的位置\\n    int k = start;\\n    while (start1 <= end1 && start2 <= end2) {\\n        reg[k++] = arr[start1] <= arr[start2] ? arr[start1++] : arr[start2++];\\n    }\\n    // 此时说明前半段数据多于后半部分\\n    while (start1 <= end1) {\\n        reg[k++] = arr[start1++];\\n    }\\n    // 此时说明后半段数据多于前半部分\\n    while (start2 <= end2) {\\n        reg[k++] = arr[start2++];\\n    }\\n    \\n    // 将辅助数组中数据拷贝到原数组\\n    for (k = start; k <= end; k++) {\\n        arr[k] = reg[k];\\n    }\\n}\\n\\nvoid merge_sort(int arr[], int len)\\n{\\n    int reg[len];\\n    merge_sort_recursive(arr, reg, 0, len-1);\\n}\\n\")])])]),r(\"h4\",{attrs:{id:\"思路\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#思路\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 思路\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[a._v(\"由于需要进行递归，而且在合并子数组的时候需要额外的内存空间来存放排好序的数组，因此需要辅助函数 merge_sort_recursive，然后声明一个大小与原数组相同的辅助数组来存放排好序的元素\")])]),a._v(\" \"),r(\"li\",[r(\"p\",[a._v(\"然后编写递归函数，找到递推公式和递推基础\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"递推公式\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"merge_sort(start...end) = merge_sort(start...mid), merge_sort(mid+1...end)\\n\")])])]),r(\"ul\",[r(\"li\",[a._v(\"递推基础\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"start >= end\\n\")])])])]),a._v(\" \"),r(\"li\",[r(\"p\",[a._v(\"编写合并子数组的代码\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"使用两个变量 start1、start2 指向两个子数组中尚未合并的第一个\\b元素的下标\")]),a._v(\" \"),r(\"li\",[a._v(\"使用变量 k 指向合并好的数组中的位置\")]),a._v(\" \"),r(\"li\",[a._v(\"每次从子数组中取最小的元素放入合并好的数组之中，并移动各个\\b指示变量\")]),a._v(\" \"),r(\"li\",[a._v(\"第一个循环过后将子数组中剩余元素拼接到排好序的\\b数组中\")]),a._v(\" \"),r(\"li\",[a._v(\"将辅助数组中数据拷贝到原数组\")])])])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"归并排序性能\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#归并排序性能\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 归并排序性能\")]),a._v(\" \"),r(\"h5\",{attrs:{id:\"归并排序是稳定的排序算法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#归并排序是稳定的排序算法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 归并排序是稳定的排序算法\")]),a._v(\" \"),r(\"p\",[a._v(\"在合并子数组的过程中先将左侧子数组放入合并好的数组中就可以实现稳定的排序算法\")]),a._v(\" \"),r(\"h5\",{attrs:{id:\"归并排序的时间复杂度是-o-nlogn\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#归并排序的时间复杂度是-o-nlogn\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 归并排序的时间复杂度是 O(nlogn)\")]),a._v(\" \"),r(\"p\",[r(\"strong\",[a._v(\"不仅递归求解的问题可以写成递推公式，递归代码的时间复杂度也可以写成递推公式\")])]),a._v(\" \"),r(\"p\",[a._v(\"递归代码时间复杂度递推公式\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"T(a) = T(b) + T(c) + K\\n\")])])]),r(\"p\",[a._v(\"归并排序的时间复杂度计算公式\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"T(1) = C；   n=1 时，只需要常量级的执行时间，所以表示为 C。\\nT(n) = 2*T(n/2) + n； n>1\\n\")])])]),r(\"p\",[a._v(\"不断将 n 代入\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"T(n) = 2*T(n/2) + n\\n     = 2*(2*T(n/4) + n/2) + n       = 4*T(n/4) + 2*n\\n     = 4*(2*T(n/8) + n/4) + 2*n     = 8*T(n/8) + 3*n\\n     = 8*(2*T(n/16) + n/8) + 3*n    = 16*T(n/16) + 4*n\\n     ......\\n     = 2^k * T(n/2^k) + k * n\\n     ......\\n\")])])]),r(\"p\",[a._v(\"由于 T(1) = C 则 n/2^k = 1 时 T(n/2^k) = C 此时 k = log2n, 代入可得到\\nT(n)=Cn+nlog2n\")]),a._v(\" \"),r(\"h5\",{attrs:{id:\"归并排序的空间复杂度是-o-n\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#归并排序的空间复杂度是-o-n\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 归并排序的空间复杂度是 O(n)\")]),a._v(\" \"),r(\"p\",[a._v(\"归并排序不是原地排序算法，需要额外的空间来合并数据。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"快速排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 快速排序\")]),a._v(\" \"),r(\"p\",[a._v(\"快速排序也是使用了分治思想，基本思路就是先找到一个枢轴点（分区点）pivot，然后遍历数据，将小于 pivot 的放于左侧，大于的放于右侧。然后分别对枢轴点左右两侧区间的数组进行排序，直到区间缩小到 1 。这时候整个数组就是有序的了。\")]),a._v(\" \"),r(\"p\",[a._v(\"递归代码\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"void quick_sort_recursive(int arr[], int start, int end)\\n{\\n    if (start >= end) return;\\n    \\n    int pivot = partition_1(arr, start, end);\\n    \\n    quick_sort_recursive(arr, start, pivot - 1);\\n    quick_sort_recursive(arr, pivot + 1, end);\\n}\\n\\nvoid quick_sort(int arr[], int len)\\n{\\n    quick_sort_recursive(arr, 0, len - 1);\\n}\\n\")])])]),r(\"p\",[a._v(\"查找枢轴代码\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"void swap(int *a, int *b)\\n{\\n    int tmp = *a;\\n    *a = *b;\\n    *b = tmp;\\n}\\n\\n// 方法 1\\nint partition(int arr[], int low, int high)\\n{\\n    // pivot 记录枢轴大小，以起始位置数据大小为枢轴\\n    int pivot = arr[low];\\n    \\n    while (low < high) {\\n        // 从右侧开始查找，直到查找到小于枢轴的位置\\n        while (arr[high] >= pivot && low < high) {\\n            --high;\\n        }\\n        // 将右侧小于枢轴大小的值交换到左侧\\n        swap(&arr[low], &arr[high]);\\n        // 从左侧开始查找，直到查找到大于枢轴的位置\\n        while (arr[low] <= pivot && low < high) {\\n            ++low;\\n        }\\n        // 将左侧大于枢轴的值交换到右侧\\n        swap(&arr[low], &arr[high]);\\n    }\\n    // 跳出循环说明 low 和 high 重合，此时所有小于枢轴的值位于枢轴值的左侧，大于的位于右侧\\n    \\n    return low;\\n}\\n\\n// 方法 2\\nint partition_1(int arr[], int low, int high)\\n{\\n    // 取最右侧值为枢轴，i 来作为游标分割比枢轴值小的值和比枢轴大的值\\n    int pivot = arr[high], i = low;\\n    \\n    // 通过 j 来遍历未处理的数据\\n    for (int j = low; j < high; ++j) {\\n        // 未处理数据小于枢轴，则将其放到已处理区的最后，然后已处理区的大小 +1\\n        if (arr[j] < pivot) {\\n            swap(&arr[i], &arr[j]);\\n            ++i;\\n        }\\n    }\\n    // 位于 i 位置之前的都是小于枢轴的，i 和它之后的都是大于枢轴的，交换 i 位置和选定的枢轴的值\\n    swap(&arr[i], &arr[high]);\\n    \\n    return i;\\n}\\n\")])])]),r(\"h4\",{attrs:{id:\"思路-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#思路-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 思路\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[a._v(\"首先需要查找枢轴点\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"思路一\\n\"),r(\"ol\",[r(\"li\",[a._v(\"首先以起始点作为枢轴，使用变量 pivot 记录枢轴点的值\")]),a._v(\" \"),r(\"li\",[a._v(\"分别使用变量 low 和 high 记录还未\\b处理的分区，大于 low 小于 high 的区间是未处理的区间，其他都是处理过的区间，处理过的区间能保证左侧的全都小于枢轴的值，右侧全都大于枢轴的值\")]),a._v(\" \"),r(\"li\",[a._v(\"从右侧开始查找，直到查找到小于枢轴值的位置\")]),a._v(\" \"),r(\"li\",[a._v(\"将右侧小于枢轴的值交换到左侧小于枢轴的区间，枢轴值现在就在右侧\")]),a._v(\" \"),r(\"li\",[a._v(\"从左侧开始查找，直到找到大于枢轴值的位置\")]),a._v(\" \"),r(\"li\",[a._v(\"将左侧大于枢轴的值交换到右侧，枢轴值现在位于左侧\")]),a._v(\" \"),r(\"li\",[a._v(\"就这样不停交换枢轴的位置直到未处理的区间\\b全部处理完成，此时所有小于枢轴的值位于枢轴值的左侧，大于的位于右侧\")])])]),a._v(\" \"),r(\"li\",[a._v(\"思路二\\n\"),r(\"ol\",[r(\"li\",[a._v(\"取最右侧值为枢轴，i 为游标标记小于枢轴值的区域（小区）， 小于等于 i 位置的区域都是小于枢轴的值\")]),a._v(\" \"),r(\"li\",[a._v(\"通过 j 遍历未处理的数据\")]),a._v(\" \"),r(\"li\",[a._v(\"处理数据，如果其小于枢轴则放到 小区 最后面，也就是 i 指示的位置，然后 i 后移，表示 小区 增加\")]),a._v(\" \"),r(\"li\",[a._v(\"退出循环表示所有的数据都已经处理， 小于 i 指示位置之前的都是小于枢轴的值，大于 i 的位置除了最后的枢轴，都大于枢轴的值\")]),a._v(\" \"),r(\"li\",[a._v(\"交换枢轴与 i 指向值的位置，此时所有小于枢轴的值位于枢轴值的左侧，大于的位于右侧\")])])])])]),a._v(\" \"),r(\"li\",[r(\"p\",[a._v(\"编写递归函数\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"递推函数\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"quick_sort(start...end) = quick_sort(start...pivot-1), quick_sort(pivot+1...end)\\n\")])])]),r(\"ul\",[r(\"li\",[a._v(\"递归基础\")])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"start >= end\\n\")])])])])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"快排的性能\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快排的性能\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 快排的性能\")]),a._v(\" \"),r(\"h5\",{attrs:{id:\"快速排序不是稳定的排序算法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速排序不是稳定的排序算法\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 快速排序不是稳定的排序算法\")]),a._v(\" \"),r(\"p\",[a._v(\"上面的所有思路都会在分区的过程涉及交换操作，这就会改变相邻元素的顺序，因此不稳定。\")]),a._v(\" \"),r(\"h5\",{attrs:{id:\"快速排序时间复杂度是-o-nlogn\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速排序时间复杂度是-o-nlogn\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 快速排序时间复杂度是 O(nlogn)\")]),a._v(\" \"),r(\"p\",[a._v(\"如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那快排的时间复杂度递推求解公式跟归并是相同的。所以，快排的时间复杂度也是 O(nlogn)。\")]),a._v(\" \"),r(\"p\",[a._v(\"当然不是每次选择枢轴都是正好位于中间，当枢轴两端分区极度不平衡的时候,需要进行将近 n 次分区，此时快排的时间复杂度会退化为 O(n^2)。\")]),a._v(\" \"),r(\"h5\",{attrs:{id:\"快速排序空间复杂度是-o-1\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速排序空间复杂度是-o-1\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 快速排序空间复杂度是 O(1)\")]),a._v(\" \"),r(\"p\",[a._v(\"上面的解题思路中没有涉及到额外内存空间，因此是原地排序算法。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"qa-o-n-时间复杂度内求无序数组中的第-k-大元素\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#qa-o-n-时间复杂度内求无序数组中的第-k-大元素\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" QA : O(n) 时间复杂度内求无序数组中的第 K 大元素\")]),a._v(\" \"),r(\"p\",[a._v(\"利用快排的分区的思路\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"选择某个元素作为枢轴，对数组进行原地分区，p 表示枢轴所在的位置\")]),a._v(\" \"),r(\"li\",[a._v(\"由于是查找第k大的值，因此左侧区域放大值，右侧区域放小值\\n\"),r(\"ol\",[r(\"li\",[a._v(\"若 p + 1 > K ，则 说明第 K 大的元素位于右侧侧小值区，继续在右侧侧区间查找\")]),a._v(\" \"),r(\"li\",[a._v(\"若 p + 1 < K 则说明第 K 大的元素位于左侧大值区， 继续再左侧区间查找\")]),a._v(\" \"),r(\"li\",[a._v(\"若 p + 1 = K 说明 p 所在位置对应的值就是要查找的值\")])])])]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"int partition(int arr[], int start, int end)\\n{\\n    int pivot = arr[end], i = start;\\n    for (int j = start; j < end; ++j) {\\n        if (arr[j] > pivot) {\\n            swap(&arr[j], &arr[i]);\\n            ++i;\\n        }\\n    }\\n    swap(&arr[end], &arr[i]);\\n    return i;\\n}\\n\\nint KthLargest(int arr[], int n, int K)\\n{\\n    if (K <= 0) return -1;\\n    \\n    int pivot = -1, start = 0, end = n - 1;\\n    while (pivot + 1 != K) {\\n        pivot = partition(arr, start, end);\\n        if (pivot + 1 > K) {\\n            end = pivot - 1;\\n        } else if (pivot + 1 < K) {\\n            start = pivot + 1;\\n        }\\n    }\\n    return arr[pivot];\\n}\\n\")])])]),r(\"h2\",{attrs:{id:\"_13-线性排序：桶排序，计数排序，基数排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-线性排序：桶排序，计数排序，基数排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 13 线性排序：桶排序，计数排序，基数排序\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"桶排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#桶排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 桶排序\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"思路-3\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#思路-3\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 思路\")]),a._v(\" \"),r(\"p\",[a._v(\"将要排序的数据分到几个有序的桶里，对每个桶里的数据再单独进行排序。排序完成之后再把每个桶里的数据按照顺序依次取出，组成新的序列就是有序的了。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"时间复杂度\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#时间复杂度\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 时间复杂度\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"划分成 m 个桶，每个桶里的元素个数就是 k = n/m\")]),a._v(\" \"),r(\"li\",[a._v(\"每个桶内使用快速排序，则每个桶时间复杂度就是 O(klogk)\")]),a._v(\" \"),r(\"li\",[a._v(\"所有的桶的时间复杂度就是 O(m * klogk),也就是 O(m * (n/m)log(n/m)),继续简化 O(nlog(n/m))\")]),a._v(\" \"),r(\"li\",[a._v(\"m 趋近于 n 的时候其趋近于 O(n)\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"是稳定排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#是稳定排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 是稳定排序\")]),a._v(\" \"),r(\"p\",[a._v(\"桶内排序方法是稳定排序的时候就是稳定的排序\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"不是原地排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不是原地排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 不是原地排序\")]),a._v(\" \"),r(\"p\",[a._v(\"需要用额外的空间来作为桶，因此不是原地排序，空间复杂度是 O(n + k), k 是桶的个数\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"使用条件\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用条件\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 使用条件\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"需要排序的数据需要很容易划分成 m 个桶，并且桶之间有着大小顺序\")]),a._v(\" \"),r(\"li\",[a._v(\"每个桶中的数据分布要比较均匀\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"适用情况\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#适用情况\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 适用情况\")]),a._v(\" \"),r(\"p\",[a._v(\"桶排序比较适合用在外部排序中。也就是数据存储在外部磁盘且数据量大，但内存有限无法将整个数据全部加载到内存\")]),a._v(\" \"),r(\"p\",[r(\"strong\",[a._v(\"需求描述：\")])]),a._v(\" \"),r(\"p\",[a._v(\"有10GB的订单数据，需按订单金额（假设金额都是正整数）进行排序，但内存有限，仅几百MB\")]),a._v(\" \"),r(\"p\",[r(\"strong\",[a._v(\"解决思路：\")])]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"扫描一遍文件，看订单金额所处数据范围，比如1元-10万元，那么就分100个桶。\")]),a._v(\" \"),r(\"li\",[a._v(\"第一个桶存储金额1-1000元之内的订单，第二个桶存1001-2000元之内的订单，依次类推。\")]),a._v(\" \"),r(\"li\",[a._v(\"每个桶对应一个文件，并按照金额范围的大小顺序编号命名（00，01，02，…，99）。\")]),a._v(\" \"),r(\"li\",[a._v(\"将100个小文件依次放入内存并用快排排序。\")]),a._v(\" \"),r(\"li\",[a._v(\"所有文件排好序后，只需按照文件编号从小到大依次读取每个小文件并写到大文件中即可。\")]),a._v(\" \"),r(\"li\")]),a._v(\" \"),r(\"p\",[r(\"strong\",[a._v(\"注意点：\")])]),a._v(\" \"),r(\"p\",[a._v(\"若单个文件无法全部载入内存，则针对该文件继续按照前面的思路进行处理即可。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"计数排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计数排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 计数排序\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"思路-4\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#思路-4\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 思路\")]),a._v(\" \"),r(\"p\",[a._v(\"计数其实与桶排序非常类似，只是桶的粒度不同。当要排序的n个数据所处范围并不大时，比如最大值为k，则分成k个桶，这时每个桶内的数据值都是相同的。\")]),a._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[a._v(\"void counting_sort(int arr[], int n)\\n{\\n    if (n <= 1) return;\\n    \\n    // 获取最大值\\n    int max = arr[0];\\n    for (int i = 1; i < n; ++i) {\\n        if (max < arr[i]) {\\n            max = arr[i];\\n        }\\n    }\\n    \\n    // 申请 max + 1 个空间 初始化为 0，记录元素的出现次数\\n    int *counts = malloc(sizeof(int) * (max + 1));\\n    for (int i = 0; i <= max; ++i) {\\n        counts[i] = 0;\\n    }\\n    \\n    // 计算从 0 到 max 大小的这些元素出现的次数\\n    for (int i = 0; i < n; ++i) {\\n        int val = arr[i];\\n        counts[val]++;\\n    }\\n    \\n    // 累加出现次数，遍历过后每个位置都记录了该小于等于该值的出现次数\\n    for (int i = 1; i <= max; ++i) {\\n        counts[i] = counts[i] + counts[i - 1];\\n    }\\n    \\n    // 临时数组\\n    int *tmp = malloc(sizeof(int) * n);\\n    // 遍历原数组\\n    for (int i = n - 1; i >= 0 ; --i) {\\n        // 取到当前位置元素\\n        int num = arr[i];\\n        // 由于 counts[num] 记录就是小于等于 num 大小元素的出现次数，因此将其减一就能获取到排序完成之后该大小元素最后一个位置\\n        int index = counts[num] - 1;\\n        // 将该元素放到对应位置\\n        tmp[index] = num;\\n        // 由于上面 num 大小的元素有一个排好了顺序，这里将 counts 中 num 对应的次数减一\\n        counts[num]--;\\n    }\\n    \\n    // 将结果拷贝给原数组\\n    for (int i = 0; i < n; ++i) {\\n        arr[i] = tmp[i];\\n    }\\n    \\n    free(counts);\\n    free(tmp);\\n}\\n\")])])]),r(\"p\",[r(\"strong\",[a._v(\"代码实现\")])]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"查找需要排序的数组中的最大值 max\")]),a._v(\" \"),r(\"li\",[a._v(\"申请 max + 1 大小的数组 counts，用于记录每个大小的元素出现次数，全都初始化为 0\")]),a._v(\" \"),r(\"li\",[a._v(\"遍历原数组，记录每个大小元素出现的次数\")]),a._v(\" \"),r(\"li\",[a._v(\"累加每个元素出现的次数，比如 counts 中 k 这个位置记录了 \"),r(\"strong\",[a._v(\"小于等于\")]),a._v(\" k 大小元素出现的次数\")]),a._v(\" \"),r(\"li\",[a._v(\"遍历原数组，由于 counts[num] 记录就是 \"),r(\"strong\",[a._v(\"小于等于\")]),a._v(\" num 大小元素的出现次数，因此将其减一就能获取到排序完成之后该大小元素最后一个位置\")]),a._v(\" \"),r(\"li\",[a._v(\"将 num 放到 临时数组对应的位置\")]),a._v(\" \"),r(\"li\",[a._v(\"放好一个 num 大小的元素后将 counts[num] 的值减去 1\")]),a._v(\" \"),r(\"li\",[a._v(\"将临时数组的元素拷贝到原数组\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"使用条件-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用条件-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 使用条件\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"只能用在数据范围不大的场景中，若数据范围k比要排序的数据n大很多，就不适合用计数排序；\")]),a._v(\" \"),r(\"li\",[a._v(\"计数排序只能给非负整数排序，其他类型需要在不改变相对大小情况下，转换为非负整数；\")]),a._v(\" \"),r(\"li\",[a._v(\"比如如果考试成绩精确到小数后一位，就需要将所有分数乘以10，转换为整数。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"时间复杂度-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#时间复杂度-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 时间复杂度\")]),a._v(\" \"),r(\"p\",[a._v(\"O(n + k), k 是数据的范围\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"是稳定排序-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#是稳定排序-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 是稳定排序\")]),a._v(\" \"),r(\"p\",[a._v(\"取决于往临时数组 tmp 中添加数据的先后，上面代码中从原数组后面往前遍历，这时原数组中相同大小的元素靠后的放在临时数组 tmp 靠后的位置，这样就保证了计数排序是稳定的排序。如果此时是从前往后遍历就不是稳定的排序了，正好与原数组中的顺序相反\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"不是原地排序-2\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不是原地排序-2\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 不是原地排序\")]),a._v(\" \"),r(\"p\",[a._v(\"需要用额外的空间来作为桶，因此不是原地排序，空间复杂度是 O(n + k), k 是数据的范围\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"基数排序\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基数排序\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 基数排序\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"算法原理（以排序10万个手机号为例来说明）\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法原理（以排序10万个手机号为例来说明）\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 算法原理（以排序10万个手机号为例来说明）\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"比较两个手机号码a，b的大小，如果在前面几位中a已经比b大了，那后面几位就不用看了。\")]),a._v(\" \"),r(\"li\",[a._v(\"借助稳定排序算法的思想，可以先按照最后一位来排序手机号码，然后再按照倒数第二位来重新排序，以此类推，最后按照第一个位重新排序。\")]),a._v(\" \"),r(\"li\",[a._v(\"经过11次排序后，手机号码就变为有序的了。\")]),a._v(\" \"),r(\"li\",[a._v(\"每次排序有序数据范围较小，可以使用桶排序或计数排序来完成。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"使用条件-3\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用条件-3\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 使用条件\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"要求数据可以分割独立的“位”来比较；\")]),a._v(\" \"),r(\"li\",[a._v(\"位之间由递进关系，如果a数据的高位比b数据大，那么剩下的地位就不用比较了；\")]),a._v(\" \"),r(\"li\",[a._v(\"每一位的数据范围不能太大，要可以用线性排序，否则基数排序的时间复杂度无法做到O(n)。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"时间复杂度-3\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#时间复杂度-3\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 时间复杂度\")]),a._v(\" \"),r(\"p\",[a._v(\"O(n * k), k 是数据的维度（比如上面的例子中就是手机号的位数 11）\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"是稳定排序-3\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#是稳定排序-3\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 是稳定排序\")]),a._v(\" \"),r(\"p\",[a._v(\"是稳定排序，如果不是稳定排序就实现不了多维度的排序\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"不是原地排序-3\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不是原地排序-3\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 不是原地排序\")]),a._v(\" \"),r(\"p\",[a._v(\"需要用额外的空间来作为桶，因此不是原地排序，空间复杂度是 O(n + k), k 是数据的维度\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"qa-对于一组包含大小写的字符进行排序，使小写的排在大写的前面。若字符中不仅有大小写还有数字的话就将数字放中间\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#qa-对于一组包含大小写的字符进行排序，使小写的排在大写的前面。若字符中不仅有大小写还有数字的话就将数字放中间\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" QA 对于一组包含大小写的字符进行排序，使小写的排在大写的前面。若字符中不仅有大小写还有数字的话就将数字放中间\")]),a._v(\" \"),r(\"p\",[a._v(\"用两个指针a、b：a指针从头开始往后遍历，遇到大写字母就停下，b从后往前遍历，遇到小写字母就停下，交换a、b指针对应的元素；重复如上过程，直到a、b指针相交。\")]),a._v(\" \"),r(\"p\",[a._v(\"对于小写字母放前面，数字放中间，大写字母放后面，可以先将数据分为小写字母和非小写字母两大类，进行如上交换后再在非小写字母区间内分为数字和大写字母做同样处理\")]),a._v(\" \"),r(\"h2\",{attrs:{id:\"_14-排序优化\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_14-排序优化\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 14 排序优化\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"排序算法选择\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#排序算法选择\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 排序算法选择\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"虽然线性排序算法的时间复杂度比较低，但是适用场景比较特殊。所以对于通用排序函数不能选择线性排序\")]),a._v(\" \"),r(\"li\",[a._v(\"小规模数据排序，可以选择复杂度是 O(n^2) 的排序算法\")]),a._v(\" \"),r(\"li\",[a._v(\"大规模数据，O(nlogn) 的排序算法更为合适\")]),a._v(\" \"),r(\"li\",[a._v(\"归并排序由于空间复杂度是 O(n) 因此使用很少\")])]),a._v(\" \"),r(\"h3\",{attrs:{id:\"快排优化\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快排优化\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 快排优化\")]),a._v(\" \"),r(\"p\",[a._v(\"快排最坏情况复杂度是 O(n^2), 出现这样情况的原因是当数据本来有序或者接近有序的时候，如果每次分区都选择最后位置的数据作为枢轴，这种情况下时间复杂度就会退化为 O(n^2)。\\n因此对于\"),r(\"strong\",[a._v(\"快排的优化主要在于合理选择分区点。最理想的情况是被分区点分开的两个分区中，数据的数量差不多。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"三数取中\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三数取中\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 三数取中\")]),a._v(\" \"),r(\"p\",[a._v(\"每次取枢轴值都在区间的头尾中间分别取值，以这三个数中间的值作为枢轴点\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"随机\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#随机\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 随机\")]),a._v(\" \"),r(\"p\",[a._v(\"顾名思义，随机从区间中取枢轴点\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"解决递归时的栈溢出\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#解决递归时的栈溢出\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 解决递归时的栈溢出\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"限制递归深度。一旦递归过深，超过了我们事先设定的阈值，就停止递归\")]),a._v(\" \"),r(\"li\",[a._v(\"是通过在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈的过程\")])]),a._v(\" \"),r(\"h3\",{attrs:{id:\"通用排序函数实现技巧\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通用排序函数实现技巧\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 通用排序函数实现技巧\")]),a._v(\" \"),r(\"ol\",[r(\"li\",[a._v(\"数据量不大时，可以采取用时间换空间的思路\")]),a._v(\" \"),r(\"li\",[a._v(\"数据量大时，优化快排分区点的选择\")]),a._v(\" \"),r(\"li\",[a._v(\"防止堆栈溢出，可以选择在堆上手动模拟调用栈解决\")]),a._v(\" \"),r(\"li\",[a._v(\"在排序区间中，当元素个数小于某个常数是，可以考虑使用 O(n^2) 级别的插入排序\")]),a._v(\" \"),r(\"li\",[a._v(\"用哨兵简化代码，每次排序都减少一次判断，尽可能把性能优化到极致\")])])])},[],!1,null,null,null);t.default=i.exports}}]);","extractedComments":[]}