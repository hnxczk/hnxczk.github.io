{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{449:function(a,t,r){\"use strict\";r.r(t);var _=r(0),e=Object(_.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[r(\"h2\",{attrs:{id:\"_08-栈\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_08-栈\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 08 栈\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"定义\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 定义\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"什么是栈\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是栈\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 什么是栈\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"后进者先出，先进者后出，这就是典型的“栈”结构。\")]),a._v(\" \"),r(\"li\",[a._v(\"从栈的操作特性来看，是一种“操作受限”的线性表，只允许在端插入（push）和删除数据（pop）。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"为什么需要栈？\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么需要栈？\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 为什么需要栈？\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"栈是一种操作受限的数据结构，其操作特性用数组和链表均可实现。\")]),a._v(\" \"),r(\"li\",[a._v(\"但，任何数据结构都是对特定应用场景的抽象，数组和链表虽然使用起来更加灵活，但却暴露了几乎所有的操作，难免会引发错误操作的风险。\")]),a._v(\" \"),r(\"li\",[a._v(\"所以，当某个数据集合只涉及在某端插入和删除数据，且满足后进者先出，先进者后出的操作特性时，我们应该首选栈这种数据结构。\")])]),a._v(\" \"),r(\"h3\",{attrs:{id:\"实现\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 实现\")]),a._v(\" \"),r(\"ul\",[r(\"li\",[a._v(\"用数组实现的栈，我们叫作顺序栈\")]),a._v(\" \"),r(\"li\",[a._v(\"用链表实现的栈，我们叫作链式栈\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"复杂度\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复杂度\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 复杂度\")]),a._v(\" \"),r(\"p\",[a._v(\"不管是顺序栈还是链式栈，入栈、出栈只涉及栈顶个别数据的操作，所以时间复杂度都是 O(1)\")]),a._v(\" \"),r(\"p\",[a._v(\"在入栈和出栈过程中，只需要一两个临时变量存储空间，所以复杂度是 O(1)\")]),a._v(\" \"),r(\"p\",[r(\"strong\",[a._v(\"空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。\")])]),a._v(\" \"),r(\"h4\",{attrs:{id:\"支持动态扩容的顺序栈\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#支持动态扩容的顺序栈\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 支持动态扩容的顺序栈\")]),a._v(\" \"),r(\"p\",[a._v(\"根据摊还分析法，每次需要扩容的 push 的复杂度可以均摊到普通的不需要扩容时 push，因此其均摊时间复杂度是 O(1)\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"应用\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 应用\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_1-函数调用\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-函数调用\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1.函数调用\")]),a._v(\" \"),r(\"p\",[a._v(\"操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构，用来存储函数调用时的临时变量。\")]),a._v(\" \"),r(\"p\",[a._v(\"每进入一个函数，就会将其中的临时变量作为栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_2-表达式\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-表达式\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 2.表达式\")]),a._v(\" \"),r(\"p\",[a._v(\"利用两个栈，其中一个用来保存操作数，另一个用来保存运算符。\")]),a._v(\" \"),r(\"p\",[a._v(\"我们从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较，若比运算符栈顶元素优先级高，就将当前运算符压入栈，若比运算符栈顶元素的优先级低或者相同，从运算符栈中取出栈顶运算符，从操作数栈顶取出2个操作数，然后进行计算，把计算完的结果压入操作数栈，继续比较。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_3-括号匹配\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-括号匹配\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 3.括号匹配\")]),a._v(\" \"),r(\"p\",[a._v(\"用栈保存为匹配的左括号，从左到右一次扫描字符串，当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号，如果能匹配上，则继续扫描剩下的字符串。\")]),a._v(\" \"),r(\"p\",[a._v(\"如果扫描过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。\")]),a._v(\" \"),r(\"p\",[a._v(\"当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明未匹配的左括号为非法格式。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_4-浏览器的前进后退\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-浏览器的前进后退\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 4.浏览器的前进后退\")]),a._v(\" \"),r(\"p\",[a._v(\"使用两个栈 A 和 B，浏览过程中把浏览的界面按顺序压入栈 A 中。\")]),a._v(\" \"),r(\"p\",[a._v(\"点击返回的按钮时，让栈 A 栈顶出栈，出栈的数据压入栈 B 中。\")]),a._v(\" \"),r(\"p\",[a._v(\"点击前进按钮时， 让栈 B 栈顶出栈，出栈的数据压入栈 A。\")]),a._v(\" \"),r(\"p\",[a._v(\"栈 A 为空说明无法后退， 栈 B 为空说明无法前进。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"qa\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#qa\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" QA\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_1-为什么函数调用要用“栈”来保存临时变量呢？\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-为什么函数调用要用“栈”来保存临时变量呢？\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 1.为什么函数调用要用“栈”来保存临时变量呢？\")]),a._v(\" \"),r(\"p\",[a._v(\"函数调用的局部状态之所以用栈来记录是因为这些数据的存活时间满足“后入先出”（LIFO）顺序，而栈的基本操作正好就是支持这种顺序的访问。\")]),a._v(\" \"),r(\"p\",[a._v(\"函数的调用有完美的嵌套关系——调用者的生命期总是长于被调用者的生命期，并且后者在前者的之内。这样，被调用者的局部信息所占空间的分配总是后于调用者的（后入），而其释放则总是先于调用者的（先出），所以正好可以满足栈的LIFO顺序，选用栈这种数据结构来实现调用栈是一种很自然的选择。\")]),a._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://www.zhihu.com/question/34499262/answer/59415153\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"知乎 RednaxelaFX 的 回答\"),r(\"OutboundLink\")],1)]),a._v(\" \"),r(\"h4\",{attrs:{id:\"_2-内存中的堆栈和数据结构堆栈是不是一个概念？\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-内存中的堆栈和数据结构堆栈是不是一个概念？\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 2.内存中的堆栈和数据结构堆栈是不是一个概念？\")]),a._v(\" \"),r(\"p\",[a._v(\"内存中的堆栈和数据结构堆栈不是一个概念，可以说内存中的堆栈是真实存在的物理区，数据结构中的堆栈是抽象的数据存储结构\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"leetcode\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#leetcode\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" LeetCode\")]),a._v(\" \"),r(\"p\",[a._v(\"20,155,232,844,224,682,496\")])])},[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}