{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{288:function(t,a,_){t.exports=_.p+\"assets/img/tcp_ip_1.bcca92dd.png\"},289:function(t,a,_){t.exports=_.p+\"assets/img/osi_1.950d5da6.jpeg\"},290:function(t,a,_){t.exports=_.p+\"assets/img/tcp_ip_2.6b266fc4.jpg\"},291:function(t,a,_){t.exports=_.p+\"assets/img/tcp_1.a88eb156.jpeg\"},446:function(t,a,_){\"use strict\";_.r(a);var r=_(0),v=Object(r.a)({},function(){var t=this,a=t.$createElement,r=t._self._c||a;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"网络概述\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络概述\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 网络概述\")]),t._v(\" \"),r(\"h2\",{attrs:{id:\"网络模型\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络模型\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 网络模型\")]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:_(288),alt:\"\"}}),t._v(\" \"),r(\"img\",{attrs:{src:_(289),alt:\"\"}})]),t._v(\" \"),r(\"h3\",{attrs:{id:\"七层协议\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#七层协议\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 七层协议\")]),t._v(\" \"),r(\"p\",[t._v(\"如图 所示，其中表示层和会话层用途如下：\")]),t._v(\" \"),r(\"p\",[t._v(\"表示层：信息的语法、语义以及它们的关联，如加密解密、转换翻译、压缩解压缩；\\n会话层：不同机器上的用户之间建立及管理会话。\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"五层协议\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五层协议\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 五层协议\")]),t._v(\" \"),r(\"p\",[t._v(\"应用层：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等。数据单位为报文。\")]),t._v(\" \"),r(\"p\",[t._v(\"运输层：提供的是进程间的通用数据传输服务。由于应用层协议很多，定义通用的运输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。\")]),t._v(\" \"),r(\"p\",[t._v(\"网络层：为主机之间提供数据传输服务，而运输层协议是为主机中的进程提供服务。网络层把运输层传递下来的报文段或者用户数据报封装成分组。\")]),t._v(\" \"),r(\"p\",[t._v(\"数据链路层：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的结点提供服务。数据链路层把网络层传来的分组封装成帧。\")]),t._v(\" \"),r(\"p\",[t._v(\"物理层：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\\n\"),r(\"img\",{attrs:{src:_(290),alt:\"\"}}),t._v(\"\\n四层模型是 TCP/IP 技术的实际模型，七层模型是标准化组织制订的理论规范，两者有如上图的对应关系。人们很少用到七层模型，一般常见的地方在负载均衡时：四层负载均衡和七层负载均衡，分别指的是在 TCP 和 HTTP 层面进行负载均衡。\")]),t._v(\" \"),r(\"h2\",{attrs:{id:\"可靠的-tcp\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可靠的-tcp\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 可靠的 TCP\")]),t._v(\" \"),r(\"p\",[t._v(\"以太网数据帧和 IP 数据包都只是简单地规定了头部应该如何携带信息，而以太网帧并不保证能够送达，也不能保证按照顺序送达，出现了可靠性问题。\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"一个假设\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个假设\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 一个假设\")]),t._v(\" \"),r(\"p\",[t._v(\"假设我们需要从 192.168.1.2 向 192.168.1.3 发送一首歌，这首歌是真正的二进制数据，全部采用 0、1 组成，这样会便于我们理解，因为人脑处理文本信息的时候总是有一种障碍。\")]),t._v(\" \"),r(\"p\",[t._v(\"在没有 TCP 协议的情况下，我们知道了本机以及目标计算机的 ip 地址，我们将歌曲的二进制信息按照 1500 字节（12000位）一块，分别包裹上 IP 首部和以太网首部，通过网口将这段 0、1 发送了出去。假设一共 2000 个 以太网帧。接着就会出现下面几种情况：\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[t._v(\"前 1000 个 以太网帧被交换机完美地转发过去了，但是后 1000 个因为交换机受到干扰而没有发到 192.168.1.3 那里，歌曲放到一半就放不出来了。\")]),t._v(\" \"),r(\"li\",[t._v(\"2000 个都发过去了，但是顺序错乱了：我们会得到一个放不出来的奇怪二进制文件。\")]),t._v(\" \"),r(\"li\",[t._v(\"2000 个都发过去了，但是部分数据遭到了破坏，0 变成了 1，结果歌曲放一半播放器崩溃了。\")])]),t._v(\" \"),r(\"p\",[t._v(\"这时候我们就会发现只靠 IP 协议是无法满足所有通信要求的。\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"如何实现可靠性传输？\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何实现可靠性传输？\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 如何实现可靠性传输？\")]),t._v(\" \"),r(\"p\",[t._v(\"TCP 通过校验、序列号机制、确认应答机制、重发控制、连接管理等特性实现了可靠性传输。具体的特性不再展开叙述，因为 TCP 实在是太复杂，展开讲还能再写五个本文这么长的系列文章。下面我重点介绍 TCP 实现可靠传输的几个重点功能：\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[t._v(\"TCP 以 段 为基本单位发送数据，段的长度是在首次建立连接的时候双方约定好的。\")]),t._v(\" \"),r(\"li\",[t._v(\"序列号和确认应答机制：每个段的发送都会携带一个整数序列号：当前段第一位在完整数据中的字节顺序，每次接收到一个段，远程计算机都要回复一个带序列号的“确认收到”。\")]),t._v(\" \"),r(\"li\",[t._v(\"重发机制：首个段发送的时候使用一个比较大的 timeout 值，之后每次的 timeout 的值都是实时计算的，因为 TCP 希望在网络情况变化时也能够尽可能地提供高性能的传输。timeout 时间过了还没有收到携带本段序列号的“确认收到”，那就重发。\\nTCP 还有基于窗口的发送速度优化、流量控制、拥塞控制等内容不再赘述。\")])]),t._v(\" \"),r(\"h2\",{attrs:{id:\"tcp三次握手\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp三次握手\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" TCP三次握手\")]),t._v(\" \"),r(\"p\",[t._v(\"举个例子，A与B要建立可靠连接。\")]),t._v(\" \"),r(\"p\",[t._v(\"以A为视角来看\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"1、A向B发出消息，告诉B我要跟你建立连接。然后等待B的回信，这次握手是必不可少的；\")]),t._v(\" \"),r(\"li\",[t._v(\"2、如果收到B的正确回信说明B知道要建立连接着件事，并做好准备。通过这一次握手A已经知道了B能入自己建立连接了。（但是为什么还需要第三次握手呢，这就要从B的视角来看待这个问题。）\")]),t._v(\" \"),r(\"li\",[t._v(\"3、向B发出消息告诉这边收到B发过来的消息了。\")])]),t._v(\" \"),r(\"p\",[t._v(\"B的视角\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"1、B收到A发来第一次握手的消息，知道了A要与自己建立连接。\")]),t._v(\" \"),r(\"li\",[t._v(\"2、B向A发出一次握手消息告诉对方自己做好了准备。这个时候如果没有第三次握手收到A发消息过来B就无法确定A是否收到了自己发过去确认信息，因此需要第三次握手。\")]),t._v(\" \"),r(\"li\",[t._v(\"3、B收到A发过来的第三次握手信息就确认了对方收到了自己发出去的第二次信息。这样一来就能建立了可靠的连接。\")])]),t._v(\" \"),r(\"h2\",{attrs:{id:\"tcp四次挥手\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp四次挥手\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" TCP四次挥手\")]),t._v(\" \"),r(\"p\",[t._v(\"举个例子，A与B要断开可靠连接。\")]),t._v(\" \"),r(\"p\",[t._v(\"A 的视角\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"1、A向B发出消息告诉B我要断开连接，这意味着A这边不会再向B发送数据了。\")]),t._v(\" \"),r(\"li\",[t._v(\"2、A收到B发过来的消息说B已经知道A这边要断开连接，但是B还有一些数据没有传输完成。此时A不能向B发送数据，但是B能向A发送数据。\")]),t._v(\" \"),r(\"li\",[t._v(\"3、A收到B发过来的消息说B这边数据已经传输完成，可以断开连接了。\")]),t._v(\" \"),r(\"li\",[t._v(\"4、A向B发送消息告诉B自己知道B那边数据传输完成了，可以断开连接了。\")])]),t._v(\" \"),r(\"p\",[t._v(\"B的视角\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"1、B收到A的消息知道了对方要断开连接\")]),t._v(\" \"),r(\"li\",[t._v(\"2、B向A发消息告诉A自己知道了对方的请求，但自己还有数据没有传输完。让A继续等待数据的传输。\")]),t._v(\" \"),r(\"li\",[t._v(\"3、B向A发消息告诉A自己的数据全部传输完成了，可以断开连接了。\")]),t._v(\" \"),r(\"li\",[t._v(\"4、B收到A发的消息确认对方收到了自己数据传输完成的消息，然后断开连接。\")])]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:_(291),alt:\"TCP握手与挥手\"}})]),t._v(\" \"),r(\"h3\",{attrs:{id:\"为什么握手是三次而挥手是四次？\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么握手是三次而挥手是四次？\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 为什么握手是三次而挥手是四次？\")]),t._v(\" \"),r(\"p\",[t._v(\"原因很简单：TCP 是全双工协议，即可以同时发送和接收数据，两条通道是完全独立的。\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[t._v(\"尝试建立连接时，两者之间什么关系都没有，而“收到。我也要建立连接。”这两个动作是有顺序的，直接用一个 IP 包发送就可以了，节省时间。\")]),t._v(\" \"),r(\"li\",[t._v(\"尝试断开连接时，“收到。我也要断开连接。”这两个动作之间还有其他事情要发生：客户端这边是不会再发送数据了，但是服务器发给客户端的 IP 包可能还在路上，这时候就要等待客户端给一个“收到”的回应，才能放心地发出“我也要断开连接”这个包。\")])]),t._v(\" \"),r(\"h2\",{attrs:{id:\"参考\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 参考\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[r(\"a\",{attrs:{href:\"https://lvwenhan.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/485.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"0.软件工程师需要了解的网络知识：从铜线到HTTP\"),r(\"OutboundLink\")],1)]),t._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/jawil/blog/issues/14\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"1.通俗大白话来理解TCP协议的三次握手和四次分手\"),r(\"OutboundLink\")],1)]),t._v(\" \"),r(\"li\",[r(\"a\",{attrs:{href:\"https://github.com/CyC2018/Interview-Notebook/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"2.https://github.com/CyC2018/Interview-Notebook/blob/master/notes/计算机网络.md\"),r(\"OutboundLink\")],1)])])])},[],!1,null,null,null);a.default=v.exports}}]);","extractedComments":[]}